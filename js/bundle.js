!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}({6:function(t,e,n){"use strict";n.r(e),n.d(e,"RenderMode",(function(){return He})),n.d(e,"rerender",(function(){return sn})),n.d(e,"loadScene",(function(){return Mn}));var r={};n.r(r),n.d(r,"create",(function(){return c})),n.d(r,"clone",(function(){return d})),n.d(r,"copy",(function(){return f})),n.d(r,"fromValues",(function(){return h})),n.d(r,"set",(function(){return l})),n.d(r,"identity",(function(){return m})),n.d(r,"transpose",(function(){return M})),n.d(r,"invert",(function(){return v})),n.d(r,"adjoint",(function(){return b})),n.d(r,"determinant",(function(){return g})),n.d(r,"multiply",(function(){return p})),n.d(r,"translate",(function(){return w})),n.d(r,"scale",(function(){return x})),n.d(r,"rotate",(function(){return y})),n.d(r,"rotateX",(function(){return S})),n.d(r,"rotateY",(function(){return E})),n.d(r,"rotateZ",(function(){return T})),n.d(r,"fromTranslation",(function(){return L})),n.d(r,"fromScaling",(function(){return D})),n.d(r,"fromRotation",(function(){return I})),n.d(r,"fromXRotation",(function(){return P})),n.d(r,"fromYRotation",(function(){return A})),n.d(r,"fromZRotation",(function(){return R})),n.d(r,"fromRotationTranslation",(function(){return U})),n.d(r,"fromQuat2",(function(){return _})),n.d(r,"getTranslation",(function(){return N})),n.d(r,"getScaling",(function(){return O})),n.d(r,"getRotation",(function(){return F})),n.d(r,"fromRotationTranslationScale",(function(){return q})),n.d(r,"fromRotationTranslationScaleOrigin",(function(){return C})),n.d(r,"fromQuat",(function(){return $})),n.d(r,"frustum",(function(){return k})),n.d(r,"perspective",(function(){return X})),n.d(r,"perspectiveFromFieldOfView",(function(){return G})),n.d(r,"ortho",(function(){return z})),n.d(r,"lookAt",(function(){return B})),n.d(r,"targetTo",(function(){return V})),n.d(r,"str",(function(){return H})),n.d(r,"frob",(function(){return j})),n.d(r,"add",(function(){return Y})),n.d(r,"subtract",(function(){return W})),n.d(r,"multiplyScalar",(function(){return K})),n.d(r,"multiplyScalarAndAdd",(function(){return Z})),n.d(r,"exactEquals",(function(){return Q})),n.d(r,"equals",(function(){return J})),n.d(r,"mul",(function(){return tt})),n.d(r,"sub",(function(){return et}));var o={};n.r(o),n.d(o,"create",(function(){return nt})),n.d(o,"clone",(function(){return rt})),n.d(o,"fromValues",(function(){return ot})),n.d(o,"copy",(function(){return at})),n.d(o,"set",(function(){return it})),n.d(o,"add",(function(){return ut})),n.d(o,"subtract",(function(){return st})),n.d(o,"multiply",(function(){return ct})),n.d(o,"divide",(function(){return dt})),n.d(o,"ceil",(function(){return ft})),n.d(o,"floor",(function(){return ht})),n.d(o,"min",(function(){return lt})),n.d(o,"max",(function(){return mt})),n.d(o,"round",(function(){return Mt})),n.d(o,"scale",(function(){return vt})),n.d(o,"scaleAndAdd",(function(){return bt})),n.d(o,"distance",(function(){return gt})),n.d(o,"squaredDistance",(function(){return pt})),n.d(o,"length",(function(){return wt})),n.d(o,"squaredLength",(function(){return xt})),n.d(o,"negate",(function(){return yt})),n.d(o,"inverse",(function(){return St})),n.d(o,"normalize",(function(){return Et})),n.d(o,"dot",(function(){return Tt})),n.d(o,"cross",(function(){return Lt})),n.d(o,"lerp",(function(){return Dt})),n.d(o,"random",(function(){return It})),n.d(o,"transformMat2",(function(){return Pt})),n.d(o,"transformMat2d",(function(){return At})),n.d(o,"transformMat3",(function(){return Rt})),n.d(o,"transformMat4",(function(){return Ut})),n.d(o,"rotate",(function(){return _t})),n.d(o,"angle",(function(){return Nt})),n.d(o,"zero",(function(){return Ot})),n.d(o,"str",(function(){return Ft})),n.d(o,"exactEquals",(function(){return qt})),n.d(o,"equals",(function(){return Ct})),n.d(o,"len",(function(){return kt})),n.d(o,"sub",(function(){return Xt})),n.d(o,"mul",(function(){return Gt})),n.d(o,"div",(function(){return zt})),n.d(o,"dist",(function(){return Bt})),n.d(o,"sqrDist",(function(){return Vt})),n.d(o,"sqrLen",(function(){return Ht})),n.d(o,"forEach",(function(){return jt}));var a={};n.r(a),n.d(a,"create",(function(){return Yt})),n.d(a,"clone",(function(){return Wt})),n.d(a,"length",(function(){return Kt})),n.d(a,"fromValues",(function(){return Zt})),n.d(a,"copy",(function(){return Qt})),n.d(a,"set",(function(){return Jt})),n.d(a,"add",(function(){return te})),n.d(a,"subtract",(function(){return ee})),n.d(a,"multiply",(function(){return ne})),n.d(a,"divide",(function(){return re})),n.d(a,"ceil",(function(){return oe})),n.d(a,"floor",(function(){return ae})),n.d(a,"min",(function(){return ie})),n.d(a,"max",(function(){return ue})),n.d(a,"round",(function(){return se})),n.d(a,"scale",(function(){return ce})),n.d(a,"scaleAndAdd",(function(){return de})),n.d(a,"distance",(function(){return fe})),n.d(a,"squaredDistance",(function(){return he})),n.d(a,"squaredLength",(function(){return le})),n.d(a,"negate",(function(){return me})),n.d(a,"inverse",(function(){return Me})),n.d(a,"normalize",(function(){return ve})),n.d(a,"dot",(function(){return be})),n.d(a,"cross",(function(){return ge})),n.d(a,"lerp",(function(){return pe})),n.d(a,"hermite",(function(){return we})),n.d(a,"bezier",(function(){return xe})),n.d(a,"random",(function(){return ye})),n.d(a,"transformMat4",(function(){return Se})),n.d(a,"transformMat3",(function(){return Ee})),n.d(a,"transformQuat",(function(){return Te})),n.d(a,"rotateX",(function(){return Le})),n.d(a,"rotateY",(function(){return De})),n.d(a,"rotateZ",(function(){return Ie})),n.d(a,"angle",(function(){return Pe})),n.d(a,"zero",(function(){return Ae})),n.d(a,"str",(function(){return Re})),n.d(a,"exactEquals",(function(){return Ue})),n.d(a,"equals",(function(){return _e})),n.d(a,"sub",(function(){return Ne})),n.d(a,"mul",(function(){return Oe})),n.d(a,"div",(function(){return Fe})),n.d(a,"dist",(function(){return qe})),n.d(a,"sqrDist",(function(){return Ce})),n.d(a,"len",(function(){return $e})),n.d(a,"sqrLen",(function(){return ke})),n.d(a,"forEach",(function(){return Xe}));var i=1e-6,u="undefined"!=typeof Float32Array?Float32Array:Array,s=Math.random;Math.PI;function c(){var t=new u(16);return u!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function d(t){var e=new u(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function f(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function h(t,e,n,r,o,a,i,s,c,d,f,h,l,m,M,v){var b=new u(16);return b[0]=t,b[1]=e,b[2]=n,b[3]=r,b[4]=o,b[5]=a,b[6]=i,b[7]=s,b[8]=c,b[9]=d,b[10]=f,b[11]=h,b[12]=l,b[13]=m,b[14]=M,b[15]=v,b}function l(t,e,n,r,o,a,i,u,s,c,d,f,h,l,m,M,v){return t[0]=e,t[1]=n,t[2]=r,t[3]=o,t[4]=a,t[5]=i,t[6]=u,t[7]=s,t[8]=c,t[9]=d,t[10]=f,t[11]=h,t[12]=l,t[13]=m,t[14]=M,t[15]=v,t}function m(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function M(t,e){if(t===e){var n=e[1],r=e[2],o=e[3],a=e[6],i=e[7],u=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=a,t[11]=e[14],t[12]=o,t[13]=i,t[14]=u}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function v(t,e){var n=e[0],r=e[1],o=e[2],a=e[3],i=e[4],u=e[5],s=e[6],c=e[7],d=e[8],f=e[9],h=e[10],l=e[11],m=e[12],M=e[13],v=e[14],b=e[15],g=n*u-r*i,p=n*s-o*i,w=n*c-a*i,x=r*s-o*u,y=r*c-a*u,S=o*c-a*s,E=d*M-f*m,T=d*v-h*m,L=d*b-l*m,D=f*v-h*M,I=f*b-l*M,P=h*b-l*v,A=g*P-p*I+w*D+x*L-y*T+S*E;return A?(A=1/A,t[0]=(u*P-s*I+c*D)*A,t[1]=(o*I-r*P-a*D)*A,t[2]=(M*S-v*y+b*x)*A,t[3]=(h*y-f*S-l*x)*A,t[4]=(s*L-i*P-c*T)*A,t[5]=(n*P-o*L+a*T)*A,t[6]=(v*w-m*S-b*p)*A,t[7]=(d*S-h*w+l*p)*A,t[8]=(i*I-u*L+c*E)*A,t[9]=(r*L-n*I-a*E)*A,t[10]=(m*y-M*w+b*g)*A,t[11]=(f*w-d*y-l*g)*A,t[12]=(u*T-i*D-s*E)*A,t[13]=(n*D-r*T+o*E)*A,t[14]=(M*p-m*x-v*g)*A,t[15]=(d*x-f*p+h*g)*A,t):null}function b(t,e){var n=e[0],r=e[1],o=e[2],a=e[3],i=e[4],u=e[5],s=e[6],c=e[7],d=e[8],f=e[9],h=e[10],l=e[11],m=e[12],M=e[13],v=e[14],b=e[15];return t[0]=u*(h*b-l*v)-f*(s*b-c*v)+M*(s*l-c*h),t[1]=-(r*(h*b-l*v)-f*(o*b-a*v)+M*(o*l-a*h)),t[2]=r*(s*b-c*v)-u*(o*b-a*v)+M*(o*c-a*s),t[3]=-(r*(s*l-c*h)-u*(o*l-a*h)+f*(o*c-a*s)),t[4]=-(i*(h*b-l*v)-d*(s*b-c*v)+m*(s*l-c*h)),t[5]=n*(h*b-l*v)-d*(o*b-a*v)+m*(o*l-a*h),t[6]=-(n*(s*b-c*v)-i*(o*b-a*v)+m*(o*c-a*s)),t[7]=n*(s*l-c*h)-i*(o*l-a*h)+d*(o*c-a*s),t[8]=i*(f*b-l*M)-d*(u*b-c*M)+m*(u*l-c*f),t[9]=-(n*(f*b-l*M)-d*(r*b-a*M)+m*(r*l-a*f)),t[10]=n*(u*b-c*M)-i*(r*b-a*M)+m*(r*c-a*u),t[11]=-(n*(u*l-c*f)-i*(r*l-a*f)+d*(r*c-a*u)),t[12]=-(i*(f*v-h*M)-d*(u*v-s*M)+m*(u*h-s*f)),t[13]=n*(f*v-h*M)-d*(r*v-o*M)+m*(r*h-o*f),t[14]=-(n*(u*v-s*M)-i*(r*v-o*M)+m*(r*s-o*u)),t[15]=n*(u*h-s*f)-i*(r*h-o*f)+d*(r*s-o*u),t}function g(t){var e=t[0],n=t[1],r=t[2],o=t[3],a=t[4],i=t[5],u=t[6],s=t[7],c=t[8],d=t[9],f=t[10],h=t[11],l=t[12],m=t[13],M=t[14],v=t[15];return(e*i-n*a)*(f*v-h*M)-(e*u-r*a)*(d*v-h*m)+(e*s-o*a)*(d*M-f*m)+(n*u-r*i)*(c*v-h*l)-(n*s-o*i)*(c*M-f*l)+(r*s-o*u)*(c*m-d*l)}function p(t,e,n){var r=e[0],o=e[1],a=e[2],i=e[3],u=e[4],s=e[5],c=e[6],d=e[7],f=e[8],h=e[9],l=e[10],m=e[11],M=e[12],v=e[13],b=e[14],g=e[15],p=n[0],w=n[1],x=n[2],y=n[3];return t[0]=p*r+w*u+x*f+y*M,t[1]=p*o+w*s+x*h+y*v,t[2]=p*a+w*c+x*l+y*b,t[3]=p*i+w*d+x*m+y*g,p=n[4],w=n[5],x=n[6],y=n[7],t[4]=p*r+w*u+x*f+y*M,t[5]=p*o+w*s+x*h+y*v,t[6]=p*a+w*c+x*l+y*b,t[7]=p*i+w*d+x*m+y*g,p=n[8],w=n[9],x=n[10],y=n[11],t[8]=p*r+w*u+x*f+y*M,t[9]=p*o+w*s+x*h+y*v,t[10]=p*a+w*c+x*l+y*b,t[11]=p*i+w*d+x*m+y*g,p=n[12],w=n[13],x=n[14],y=n[15],t[12]=p*r+w*u+x*f+y*M,t[13]=p*o+w*s+x*h+y*v,t[14]=p*a+w*c+x*l+y*b,t[15]=p*i+w*d+x*m+y*g,t}function w(t,e,n){var r,o,a,i,u,s,c,d,f,h,l,m,M=n[0],v=n[1],b=n[2];return e===t?(t[12]=e[0]*M+e[4]*v+e[8]*b+e[12],t[13]=e[1]*M+e[5]*v+e[9]*b+e[13],t[14]=e[2]*M+e[6]*v+e[10]*b+e[14],t[15]=e[3]*M+e[7]*v+e[11]*b+e[15]):(r=e[0],o=e[1],a=e[2],i=e[3],u=e[4],s=e[5],c=e[6],d=e[7],f=e[8],h=e[9],l=e[10],m=e[11],t[0]=r,t[1]=o,t[2]=a,t[3]=i,t[4]=u,t[5]=s,t[6]=c,t[7]=d,t[8]=f,t[9]=h,t[10]=l,t[11]=m,t[12]=r*M+u*v+f*b+e[12],t[13]=o*M+s*v+h*b+e[13],t[14]=a*M+c*v+l*b+e[14],t[15]=i*M+d*v+m*b+e[15]),t}function x(t,e,n){var r=n[0],o=n[1],a=n[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*o,t[5]=e[5]*o,t[6]=e[6]*o,t[7]=e[7]*o,t[8]=e[8]*a,t[9]=e[9]*a,t[10]=e[10]*a,t[11]=e[11]*a,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function y(t,e,n,r){var o,a,u,s,c,d,f,h,l,m,M,v,b,g,p,w,x,y,S,E,T,L,D,I,P=r[0],A=r[1],R=r[2],U=Math.hypot(P,A,R);return U<i?null:(P*=U=1/U,A*=U,R*=U,o=Math.sin(n),u=1-(a=Math.cos(n)),s=e[0],c=e[1],d=e[2],f=e[3],h=e[4],l=e[5],m=e[6],M=e[7],v=e[8],b=e[9],g=e[10],p=e[11],w=P*P*u+a,x=A*P*u+R*o,y=R*P*u-A*o,S=P*A*u-R*o,E=A*A*u+a,T=R*A*u+P*o,L=P*R*u+A*o,D=A*R*u-P*o,I=R*R*u+a,t[0]=s*w+h*x+v*y,t[1]=c*w+l*x+b*y,t[2]=d*w+m*x+g*y,t[3]=f*w+M*x+p*y,t[4]=s*S+h*E+v*T,t[5]=c*S+l*E+b*T,t[6]=d*S+m*E+g*T,t[7]=f*S+M*E+p*T,t[8]=s*L+h*D+v*I,t[9]=c*L+l*D+b*I,t[10]=d*L+m*D+g*I,t[11]=f*L+M*D+p*I,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function S(t,e,n){var r=Math.sin(n),o=Math.cos(n),a=e[4],i=e[5],u=e[6],s=e[7],c=e[8],d=e[9],f=e[10],h=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=a*o+c*r,t[5]=i*o+d*r,t[6]=u*o+f*r,t[7]=s*o+h*r,t[8]=c*o-a*r,t[9]=d*o-i*r,t[10]=f*o-u*r,t[11]=h*o-s*r,t}function E(t,e,n){var r=Math.sin(n),o=Math.cos(n),a=e[0],i=e[1],u=e[2],s=e[3],c=e[8],d=e[9],f=e[10],h=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*o-c*r,t[1]=i*o-d*r,t[2]=u*o-f*r,t[3]=s*o-h*r,t[8]=a*r+c*o,t[9]=i*r+d*o,t[10]=u*r+f*o,t[11]=s*r+h*o,t}function T(t,e,n){var r=Math.sin(n),o=Math.cos(n),a=e[0],i=e[1],u=e[2],s=e[3],c=e[4],d=e[5],f=e[6],h=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*o+c*r,t[1]=i*o+d*r,t[2]=u*o+f*r,t[3]=s*o+h*r,t[4]=c*o-a*r,t[5]=d*o-i*r,t[6]=f*o-u*r,t[7]=h*o-s*r,t}function L(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function D(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function I(t,e,n){var r,o,a,u=n[0],s=n[1],c=n[2],d=Math.hypot(u,s,c);return d<i?null:(u*=d=1/d,s*=d,c*=d,r=Math.sin(e),a=1-(o=Math.cos(e)),t[0]=u*u*a+o,t[1]=s*u*a+c*r,t[2]=c*u*a-s*r,t[3]=0,t[4]=u*s*a-c*r,t[5]=s*s*a+o,t[6]=c*s*a+u*r,t[7]=0,t[8]=u*c*a+s*r,t[9]=s*c*a-u*r,t[10]=c*c*a+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function P(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function A(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function R(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function U(t,e,n){var r=e[0],o=e[1],a=e[2],i=e[3],u=r+r,s=o+o,c=a+a,d=r*u,f=r*s,h=r*c,l=o*s,m=o*c,M=a*c,v=i*u,b=i*s,g=i*c;return t[0]=1-(l+M),t[1]=f+g,t[2]=h-b,t[3]=0,t[4]=f-g,t[5]=1-(d+M),t[6]=m+v,t[7]=0,t[8]=h+b,t[9]=m-v,t[10]=1-(d+l),t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function _(t,e){var n=new u(3),r=-e[0],o=-e[1],a=-e[2],i=e[3],s=e[4],c=e[5],d=e[6],f=e[7],h=r*r+o*o+a*a+i*i;return h>0?(n[0]=2*(s*i+f*r+c*a-d*o)/h,n[1]=2*(c*i+f*o+d*r-s*a)/h,n[2]=2*(d*i+f*a+s*o-c*r)/h):(n[0]=2*(s*i+f*r+c*a-d*o),n[1]=2*(c*i+f*o+d*r-s*a),n[2]=2*(d*i+f*a+s*o-c*r)),U(t,e,n),t}function N(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function O(t,e){var n=e[0],r=e[1],o=e[2],a=e[4],i=e[5],u=e[6],s=e[8],c=e[9],d=e[10];return t[0]=Math.hypot(n,r,o),t[1]=Math.hypot(a,i,u),t[2]=Math.hypot(s,c,d),t}function F(t,e){var n=new u(3);O(n,e);var r=1/n[0],o=1/n[1],a=1/n[2],i=e[0]*r,s=e[1]*o,c=e[2]*a,d=e[4]*r,f=e[5]*o,h=e[6]*a,l=e[8]*r,m=e[9]*o,M=e[10]*a,v=i+f+M,b=0;return v>0?(b=2*Math.sqrt(v+1),t[3]=.25*b,t[0]=(h-m)/b,t[1]=(l-c)/b,t[2]=(s-d)/b):i>f&&i>M?(b=2*Math.sqrt(1+i-f-M),t[3]=(h-m)/b,t[0]=.25*b,t[1]=(s+d)/b,t[2]=(l+c)/b):f>M?(b=2*Math.sqrt(1+f-i-M),t[3]=(l-c)/b,t[0]=(s+d)/b,t[1]=.25*b,t[2]=(h+m)/b):(b=2*Math.sqrt(1+M-i-f),t[3]=(s-d)/b,t[0]=(l+c)/b,t[1]=(h+m)/b,t[2]=.25*b),t}function q(t,e,n,r){var o=e[0],a=e[1],i=e[2],u=e[3],s=o+o,c=a+a,d=i+i,f=o*s,h=o*c,l=o*d,m=a*c,M=a*d,v=i*d,b=u*s,g=u*c,p=u*d,w=r[0],x=r[1],y=r[2];return t[0]=(1-(m+v))*w,t[1]=(h+p)*w,t[2]=(l-g)*w,t[3]=0,t[4]=(h-p)*x,t[5]=(1-(f+v))*x,t[6]=(M+b)*x,t[7]=0,t[8]=(l+g)*y,t[9]=(M-b)*y,t[10]=(1-(f+m))*y,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function C(t,e,n,r,o){var a=e[0],i=e[1],u=e[2],s=e[3],c=a+a,d=i+i,f=u+u,h=a*c,l=a*d,m=a*f,M=i*d,v=i*f,b=u*f,g=s*c,p=s*d,w=s*f,x=r[0],y=r[1],S=r[2],E=o[0],T=o[1],L=o[2],D=(1-(M+b))*x,I=(l+w)*x,P=(m-p)*x,A=(l-w)*y,R=(1-(h+b))*y,U=(v+g)*y,_=(m+p)*S,N=(v-g)*S,O=(1-(h+M))*S;return t[0]=D,t[1]=I,t[2]=P,t[3]=0,t[4]=A,t[5]=R,t[6]=U,t[7]=0,t[8]=_,t[9]=N,t[10]=O,t[11]=0,t[12]=n[0]+E-(D*E+A*T+_*L),t[13]=n[1]+T-(I*E+R*T+N*L),t[14]=n[2]+L-(P*E+U*T+O*L),t[15]=1,t}function $(t,e){var n=e[0],r=e[1],o=e[2],a=e[3],i=n+n,u=r+r,s=o+o,c=n*i,d=r*i,f=r*u,h=o*i,l=o*u,m=o*s,M=a*i,v=a*u,b=a*s;return t[0]=1-f-m,t[1]=d+b,t[2]=h-v,t[3]=0,t[4]=d-b,t[5]=1-c-m,t[6]=l+M,t[7]=0,t[8]=h+v,t[9]=l-M,t[10]=1-c-f,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function k(t,e,n,r,o,a,i){var u=1/(n-e),s=1/(o-r),c=1/(a-i);return t[0]=2*a*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*a*s,t[6]=0,t[7]=0,t[8]=(n+e)*u,t[9]=(o+r)*s,t[10]=(i+a)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=i*a*2*c,t[15]=0,t}function X(t,e,n,r,o){var a,i=1/Math.tan(e/2);return t[0]=i/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=i,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0?(a=1/(r-o),t[10]=(o+r)*a,t[14]=2*o*r*a):(t[10]=-1,t[14]=-2*r),t}function G(t,e,n,r){var o=Math.tan(e.upDegrees*Math.PI/180),a=Math.tan(e.downDegrees*Math.PI/180),i=Math.tan(e.leftDegrees*Math.PI/180),u=Math.tan(e.rightDegrees*Math.PI/180),s=2/(i+u),c=2/(o+a);return t[0]=s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(i-u)*s*.5,t[9]=(o-a)*c*.5,t[10]=r/(n-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*n/(n-r),t[15]=0,t}function z(t,e,n,r,o,a,i){var u=1/(e-n),s=1/(r-o),c=1/(a-i);return t[0]=-2*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(e+n)*u,t[13]=(o+r)*s,t[14]=(i+a)*c,t[15]=1,t}function B(t,e,n,r){var o,a,u,s,c,d,f,h,l,M,v=e[0],b=e[1],g=e[2],p=r[0],w=r[1],x=r[2],y=n[0],S=n[1],E=n[2];return Math.abs(v-y)<i&&Math.abs(b-S)<i&&Math.abs(g-E)<i?m(t):(f=v-y,h=b-S,l=g-E,o=w*(l*=M=1/Math.hypot(f,h,l))-x*(h*=M),a=x*(f*=M)-p*l,u=p*h-w*f,(M=Math.hypot(o,a,u))?(o*=M=1/M,a*=M,u*=M):(o=0,a=0,u=0),s=h*u-l*a,c=l*o-f*u,d=f*a-h*o,(M=Math.hypot(s,c,d))?(s*=M=1/M,c*=M,d*=M):(s=0,c=0,d=0),t[0]=o,t[1]=s,t[2]=f,t[3]=0,t[4]=a,t[5]=c,t[6]=h,t[7]=0,t[8]=u,t[9]=d,t[10]=l,t[11]=0,t[12]=-(o*v+a*b+u*g),t[13]=-(s*v+c*b+d*g),t[14]=-(f*v+h*b+l*g),t[15]=1,t)}function V(t,e,n,r){var o=e[0],a=e[1],i=e[2],u=r[0],s=r[1],c=r[2],d=o-n[0],f=a-n[1],h=i-n[2],l=d*d+f*f+h*h;l>0&&(d*=l=1/Math.sqrt(l),f*=l,h*=l);var m=s*h-c*f,M=c*d-u*h,v=u*f-s*d;return(l=m*m+M*M+v*v)>0&&(m*=l=1/Math.sqrt(l),M*=l,v*=l),t[0]=m,t[1]=M,t[2]=v,t[3]=0,t[4]=f*v-h*M,t[5]=h*m-d*v,t[6]=d*M-f*m,t[7]=0,t[8]=d,t[9]=f,t[10]=h,t[11]=0,t[12]=o,t[13]=a,t[14]=i,t[15]=1,t}function H(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function j(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function Y(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t[9]=e[9]+n[9],t[10]=e[10]+n[10],t[11]=e[11]+n[11],t[12]=e[12]+n[12],t[13]=e[13]+n[13],t[14]=e[14]+n[14],t[15]=e[15]+n[15],t}function W(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t[9]=e[9]-n[9],t[10]=e[10]-n[10],t[11]=e[11]-n[11],t[12]=e[12]-n[12],t[13]=e[13]-n[13],t[14]=e[14]-n[14],t[15]=e[15]-n[15],t}function K(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12]*n,t[13]=e[13]*n,t[14]=e[14]*n,t[15]=e[15]*n,t}function Z(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t[4]=e[4]+n[4]*r,t[5]=e[5]+n[5]*r,t[6]=e[6]+n[6]*r,t[7]=e[7]+n[7]*r,t[8]=e[8]+n[8]*r,t[9]=e[9]+n[9]*r,t[10]=e[10]+n[10]*r,t[11]=e[11]+n[11]*r,t[12]=e[12]+n[12]*r,t[13]=e[13]+n[13]*r,t[14]=e[14]+n[14]*r,t[15]=e[15]+n[15]*r,t}function Q(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function J(t,e){var n=t[0],r=t[1],o=t[2],a=t[3],u=t[4],s=t[5],c=t[6],d=t[7],f=t[8],h=t[9],l=t[10],m=t[11],M=t[12],v=t[13],b=t[14],g=t[15],p=e[0],w=e[1],x=e[2],y=e[3],S=e[4],E=e[5],T=e[6],L=e[7],D=e[8],I=e[9],P=e[10],A=e[11],R=e[12],U=e[13],_=e[14],N=e[15];return Math.abs(n-p)<=i*Math.max(1,Math.abs(n),Math.abs(p))&&Math.abs(r-w)<=i*Math.max(1,Math.abs(r),Math.abs(w))&&Math.abs(o-x)<=i*Math.max(1,Math.abs(o),Math.abs(x))&&Math.abs(a-y)<=i*Math.max(1,Math.abs(a),Math.abs(y))&&Math.abs(u-S)<=i*Math.max(1,Math.abs(u),Math.abs(S))&&Math.abs(s-E)<=i*Math.max(1,Math.abs(s),Math.abs(E))&&Math.abs(c-T)<=i*Math.max(1,Math.abs(c),Math.abs(T))&&Math.abs(d-L)<=i*Math.max(1,Math.abs(d),Math.abs(L))&&Math.abs(f-D)<=i*Math.max(1,Math.abs(f),Math.abs(D))&&Math.abs(h-I)<=i*Math.max(1,Math.abs(h),Math.abs(I))&&Math.abs(l-P)<=i*Math.max(1,Math.abs(l),Math.abs(P))&&Math.abs(m-A)<=i*Math.max(1,Math.abs(m),Math.abs(A))&&Math.abs(M-R)<=i*Math.max(1,Math.abs(M),Math.abs(R))&&Math.abs(v-U)<=i*Math.max(1,Math.abs(v),Math.abs(U))&&Math.abs(b-_)<=i*Math.max(1,Math.abs(b),Math.abs(_))&&Math.abs(g-N)<=i*Math.max(1,Math.abs(g),Math.abs(N))}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var tt=p,et=W;function nt(){var t=new u(2);return u!=Float32Array&&(t[0]=0,t[1]=0),t}function rt(t){var e=new u(2);return e[0]=t[0],e[1]=t[1],e}function ot(t,e){var n=new u(2);return n[0]=t,n[1]=e,n}function at(t,e){return t[0]=e[0],t[1]=e[1],t}function it(t,e,n){return t[0]=e,t[1]=n,t}function ut(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t}function st(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t}function ct(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t}function dt(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t}function ft(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t}function ht(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t}function lt(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t}function mt(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t}function Mt(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t}function vt(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t}function bt(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t}function gt(t,e){var n=e[0]-t[0],r=e[1]-t[1];return Math.hypot(n,r)}function pt(t,e){var n=e[0]-t[0],r=e[1]-t[1];return n*n+r*r}function wt(t){var e=t[0],n=t[1];return Math.hypot(e,n)}function xt(t){var e=t[0],n=t[1];return e*e+n*n}function yt(t,e){return t[0]=-e[0],t[1]=-e[1],t}function St(t,e){return t[0]=1/e[0],t[1]=1/e[1],t}function Et(t,e){var n=e[0],r=e[1],o=n*n+r*r;return o>0&&(o=1/Math.sqrt(o)),t[0]=e[0]*o,t[1]=e[1]*o,t}function Tt(t,e){return t[0]*e[0]+t[1]*e[1]}function Lt(t,e,n){var r=e[0]*n[1]-e[1]*n[0];return t[0]=t[1]=0,t[2]=r,t}function Dt(t,e,n,r){var o=e[0],a=e[1];return t[0]=o+r*(n[0]-o),t[1]=a+r*(n[1]-a),t}function It(t,e){e=e||1;var n=2*s()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t}function Pt(t,e,n){var r=e[0],o=e[1];return t[0]=n[0]*r+n[2]*o,t[1]=n[1]*r+n[3]*o,t}function At(t,e,n){var r=e[0],o=e[1];return t[0]=n[0]*r+n[2]*o+n[4],t[1]=n[1]*r+n[3]*o+n[5],t}function Rt(t,e,n){var r=e[0],o=e[1];return t[0]=n[0]*r+n[3]*o+n[6],t[1]=n[1]*r+n[4]*o+n[7],t}function Ut(t,e,n){var r=e[0],o=e[1];return t[0]=n[0]*r+n[4]*o+n[12],t[1]=n[1]*r+n[5]*o+n[13],t}function _t(t,e,n,r){var o=e[0]-n[0],a=e[1]-n[1],i=Math.sin(r),u=Math.cos(r);return t[0]=o*u-a*i+n[0],t[1]=o*i+a*u+n[1],t}function Nt(t,e){var n=t[0],r=t[1],o=e[0],a=e[1],i=Math.sqrt(n*n+r*r)*Math.sqrt(o*o+a*a),u=i&&(n*o+r*a)/i;return Math.acos(Math.min(Math.max(u,-1),1))}function Ot(t){return t[0]=0,t[1]=0,t}function Ft(t){return"vec2("+t[0]+", "+t[1]+")"}function qt(t,e){return t[0]===e[0]&&t[1]===e[1]}function Ct(t,e){var n=t[0],r=t[1],o=e[0],a=e[1];return Math.abs(n-o)<=i*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(r-a)<=i*Math.max(1,Math.abs(r),Math.abs(a))}var $t,kt=wt,Xt=st,Gt=ct,zt=dt,Bt=gt,Vt=pt,Ht=xt,jt=($t=nt(),function(t,e,n,r,o,a){var i,u;for(e||(e=2),n||(n=0),u=r?Math.min(r*e+n,t.length):t.length,i=n;i<u;i+=e)$t[0]=t[i],$t[1]=t[i+1],o($t,$t,a),t[i]=$t[0],t[i+1]=$t[1];return t});function Yt(){var t=new u(3);return u!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function Wt(t){var e=new u(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function Kt(t){var e=t[0],n=t[1],r=t[2];return Math.hypot(e,n,r)}function Zt(t,e,n){var r=new u(3);return r[0]=t,r[1]=e,r[2]=n,r}function Qt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function Jt(t,e,n,r){return t[0]=e,t[1]=n,t[2]=r,t}function te(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t}function ee(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t}function ne(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t[2]=e[2]*n[2],t}function re(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t[2]=e[2]/n[2],t}function oe(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}function ae(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}function ie(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t[2]=Math.min(e[2],n[2]),t}function ue(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t[2]=Math.max(e[2],n[2]),t}function se(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}function ce(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function de(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t}function fe(t,e){var n=e[0]-t[0],r=e[1]-t[1],o=e[2]-t[2];return Math.hypot(n,r,o)}function he(t,e){var n=e[0]-t[0],r=e[1]-t[1],o=e[2]-t[2];return n*n+r*r+o*o}function le(t){var e=t[0],n=t[1],r=t[2];return e*e+n*n+r*r}function me(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function Me(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function ve(t,e){var n=e[0],r=e[1],o=e[2],a=n*n+r*r+o*o;return a>0&&(a=1/Math.sqrt(a)),t[0]=e[0]*a,t[1]=e[1]*a,t[2]=e[2]*a,t}function be(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function ge(t,e,n){var r=e[0],o=e[1],a=e[2],i=n[0],u=n[1],s=n[2];return t[0]=o*s-a*u,t[1]=a*i-r*s,t[2]=r*u-o*i,t}function pe(t,e,n,r){var o=e[0],a=e[1],i=e[2];return t[0]=o+r*(n[0]-o),t[1]=a+r*(n[1]-a),t[2]=i+r*(n[2]-i),t}function we(t,e,n,r,o,a){var i=a*a,u=i*(2*a-3)+1,s=i*(a-2)+a,c=i*(a-1),d=i*(3-2*a);return t[0]=e[0]*u+n[0]*s+r[0]*c+o[0]*d,t[1]=e[1]*u+n[1]*s+r[1]*c+o[1]*d,t[2]=e[2]*u+n[2]*s+r[2]*c+o[2]*d,t}function xe(t,e,n,r,o,a){var i=1-a,u=i*i,s=a*a,c=u*i,d=3*a*u,f=3*s*i,h=s*a;return t[0]=e[0]*c+n[0]*d+r[0]*f+o[0]*h,t[1]=e[1]*c+n[1]*d+r[1]*f+o[1]*h,t[2]=e[2]*c+n[2]*d+r[2]*f+o[2]*h,t}function ye(t,e){e=e||1;var n=2*s()*Math.PI,r=2*s()-1,o=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*o,t[1]=Math.sin(n)*o,t[2]=r*e,t}function Se(t,e,n){var r=e[0],o=e[1],a=e[2],i=n[3]*r+n[7]*o+n[11]*a+n[15];return i=i||1,t[0]=(n[0]*r+n[4]*o+n[8]*a+n[12])/i,t[1]=(n[1]*r+n[5]*o+n[9]*a+n[13])/i,t[2]=(n[2]*r+n[6]*o+n[10]*a+n[14])/i,t}function Ee(t,e,n){var r=e[0],o=e[1],a=e[2];return t[0]=r*n[0]+o*n[3]+a*n[6],t[1]=r*n[1]+o*n[4]+a*n[7],t[2]=r*n[2]+o*n[5]+a*n[8],t}function Te(t,e,n){var r=n[0],o=n[1],a=n[2],i=n[3],u=e[0],s=e[1],c=e[2],d=o*c-a*s,f=a*u-r*c,h=r*s-o*u,l=o*h-a*f,m=a*d-r*h,M=r*f-o*d,v=2*i;return d*=v,f*=v,h*=v,l*=2,m*=2,M*=2,t[0]=u+d+l,t[1]=s+f+m,t[2]=c+h+M,t}function Le(t,e,n,r){var o=[],a=[];return o[0]=e[0]-n[0],o[1]=e[1]-n[1],o[2]=e[2]-n[2],a[0]=o[0],a[1]=o[1]*Math.cos(r)-o[2]*Math.sin(r),a[2]=o[1]*Math.sin(r)+o[2]*Math.cos(r),t[0]=a[0]+n[0],t[1]=a[1]+n[1],t[2]=a[2]+n[2],t}function De(t,e,n,r){var o=[],a=[];return o[0]=e[0]-n[0],o[1]=e[1]-n[1],o[2]=e[2]-n[2],a[0]=o[2]*Math.sin(r)+o[0]*Math.cos(r),a[1]=o[1],a[2]=o[2]*Math.cos(r)-o[0]*Math.sin(r),t[0]=a[0]+n[0],t[1]=a[1]+n[1],t[2]=a[2]+n[2],t}function Ie(t,e,n,r){var o=[],a=[];return o[0]=e[0]-n[0],o[1]=e[1]-n[1],o[2]=e[2]-n[2],a[0]=o[0]*Math.cos(r)-o[1]*Math.sin(r),a[1]=o[0]*Math.sin(r)+o[1]*Math.cos(r),a[2]=o[2],t[0]=a[0]+n[0],t[1]=a[1]+n[1],t[2]=a[2]+n[2],t}function Pe(t,e){var n=t[0],r=t[1],o=t[2],a=e[0],i=e[1],u=e[2],s=Math.sqrt(n*n+r*r+o*o)*Math.sqrt(a*a+i*i+u*u),c=s&&be(t,e)/s;return Math.acos(Math.min(Math.max(c,-1),1))}function Ae(t){return t[0]=0,t[1]=0,t[2]=0,t}function Re(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Ue(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function _e(t,e){var n=t[0],r=t[1],o=t[2],a=e[0],u=e[1],s=e[2];return Math.abs(n-a)<=i*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(r-u)<=i*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(o-s)<=i*Math.max(1,Math.abs(o),Math.abs(s))}var Ne=ee,Oe=ne,Fe=re,qe=fe,Ce=he,$e=Kt,ke=le,Xe=function(){var t=Yt();return function(e,n,r,o,a,i){var u,s;for(n||(n=3),r||(r=0),s=o?Math.min(o*n+r,e.length):e.length,u=r;u<s;u+=n)t[0]=e[u],t[1]=e[u+1],t[2]=e[u+2],a(t,t,i),e[u]=t[0],e[u+1]=t[1],e[u+2]=t[2];return e}}();function Ge(t){let e=t;return e=((170&e)>>1)+(85&e),e=((204&e)>>2)+(51&e),e=((240&e)>>4)+(15&e),e}class ze{constructor(){this.bboxStart=a.create(),this.bboxEnd=a.create(),this.bboxCenter=a.create()}}class Be extends ze{constructor(){super(...arguments),this.initialized=!1,this.dataLoadedOffset=0,this.renderPreferences={}}load(t){let e=this.parseHeader(t);this.nodes.set(new Uint32Array(t.slice(e)))}parseHeader(t){let e=0;this.bboxStart.set(new Float32Array(t.slice(e,e+12))),e+=12,this.bboxEnd.set(new Float32Array(t.slice(e,e+12))),e+=12,this.rootSide=new Float32Array(t.slice(e,e+4))[0],e+=4,this.nLevels=new Uint32Array(t.slice(e,e+4))[0],e+=4,this.nNodes=new Uint32Array(t.slice(e,e+4))[0],e+=4;new Uint32Array(t.slice(e,e+4))[0];e+=4;const n=new Uint32Array(t.slice(e,e+4))[0];return this.originalNodeLength=n,e+=4,this.nodes=new Uint32Array(n),a.sub(this.bboxCenter,this.bboxEnd,this.bboxStart),a.scaleAndAdd(this.bboxCenter,this.bboxStart,this.bboxCenter,.5),e}loadChunk(t){if(this.initialized)this.nodes.set(new Uint32Array(t.buffer),this.dataLoadedOffset/4),this.dataLoadedOffset+=t.length;else{const e=this.parseHeader(t.buffer);this.initialized=!0,(t.length-e)/4!==this.nodes.length&&this.nodes.fill(Math.pow(2,31)-1),this.loadChunk(t.slice(e))}}castRay(t,e,n=100){const r=this.rootSide/Math.pow(2,this.nLevels-1),o=a.copy(a.create(),t);for(let t=0;t<n;t++){a.scaleAndAdd(o,o,e,r);const t=this.getVoxel(o);if(t)return{...t,maxRayLength:r*n}}return null}getVoxel(t){const e=a.create();e.set(this.bboxCenter);let n=0,r=this.rootSide/2;for(let o=0;o<this.nLevels;o++){const a=(t[0]>e[0]?4:0)+(t[1]>e[1]?2:0)+(t[2]>e[2]?1:0),i=this.nodes[n];if(!(0!=(i&1<<a)))return null;if(o===this.nLevels-1)return{nodeIndex:n,hitPos:e};r/=2,e[0]+=t[0]>e[0]?r:-r,e[1]+=t[1]>e[1]?r:-r,e[2]+=t[2]>e[2]?r:-r;const u=Ge(i>>a);n=this.nodes[n+u]}return null}}var Ve=class{constructor(){this.position=a.create(),this.target=a.create(),this.upDir=a.create(),this.viewMat=r.create(),this.viewMatInv=r.create(),this.projMat=r.create(),this.projMatInv=r.create(),this.fovY=1.0471975511966667,a.set(this.upDir,0,1,0)}updateMatrices(){r.lookAt(this.viewMat,this.position,this.target,this.upDir),r.perspective(this.projMat,this.fovY,window.innerWidth/window.innerHeight,.1,1),r.invert(this.projMatInv,this.projMat),r.invert(this.viewMatInv,this.viewMat)}updatePosition(){const t=a.subtract(a.create(),this.position,this.target);console.log(t),a.transformMat4(this.position,t,this.viewMat),a.add(this.position,this.position,this.target)}};var He,je=class{constructor(t,e){this.camera=t,this.moveSpeed=e,this.prevMousePos=o.create(),this.mousePos=o.create(),this.tmpDir=a.create(),this.keyDownStatus={},this.radius=a.dist(this.camera.position,this.camera.target),a.normalize(this.tmpDir,a.sub(this.tmpDir,this.camera.target,this.camera.position))}init(){this.radius=a.dist(this.camera.position,this.camera.target),a.normalize(this.tmpDir,a.sub(this.tmpDir,this.camera.target,this.camera.position))}update(t){let e=!1;this.keyDownStatus.shift&&(t*=10);const n=a.create();if(this.keyDownStatus.w&&(e=!0,a.normalize(n,a.sub(n,this.camera.target,this.camera.position)),this.moveInDirection(n,this.moveSpeed*t)),this.keyDownStatus.s&&(e=!0,a.normalize(n,a.sub(n,this.camera.target,this.camera.position)),this.moveInDirection(n,-this.moveSpeed*t)),this.keyDownStatus.a&&(e=!0,a.cross(n,a.normalize(n,a.sub(n,this.camera.position,this.camera.target)),this.camera.upDir),this.moveInDirection(n,this.moveSpeed*t)),this.keyDownStatus.d&&(e=!0,a.cross(n,a.normalize(n,a.sub(n,this.camera.position,this.camera.target)),this.camera.upDir),this.moveInDirection(n,-this.moveSpeed*t)),this.keyDownStatus.q&&(e=!0,a.normalize(n,a.sub(n,this.camera.target,this.camera.position)),this.rotateAlongLocalY(.5,t)),this.keyDownStatus.e&&(e=!0,a.normalize(n,a.sub(n,this.camera.target,this.camera.position)),this.rotateAlongLocalY(.5,-t)),this.keyDownStatus["mouse-0"]){e=!0;const t=o.subtract(o.create(),this.prevMousePos,this.mousePos);o.divide(t,t,[document.documentElement.clientWidth,document.documentElement.clientHeight]);const n=5;this.rotateAlongLocalY(t[0],n),this.rotateAlongLocalX(t[1],-n)}e&&this.camera.updateMatrices(),this.prevMousePos.set(this.mousePos)}moveInDirection(t,e){a.scaleAndAdd(this.camera.position,this.camera.position,t,e),a.scaleAndAdd(this.camera.target,this.camera.target,t,e)}rotateAlongLocalY(t,e){const n=r.rotate(r.create(),r.identity(r.create()),t*e,this.camera.upDir);a.transformMat4(this.tmpDir,this.tmpDir,n),a.scaleAndAdd(this.camera.target,this.camera.position,this.tmpDir,this.radius)}rotateAlongLocalX(t,e){const n=a.subtract(a.create(),this.camera.target,this.camera.position);a.normalize(n,n);const o=a.create();a.cross(o,this.camera.upDir,n);const i=r.create();r.rotate(i,r.identity(i),t*e,o),a.transformMat4(this.tmpDir,this.tmpDir,i),a.scaleAndAdd(this.camera.target,this.camera.position,this.tmpDir,this.radius)}rotateAroundPivot(t){}onKeyDown(t){this.keyDownStatus[t.key.toLocaleLowerCase()]=!0}onKeyUp(t){this.keyDownStatus[t.key.toLocaleLowerCase()]=!1}onMouseDown(t){this.keyDownStatus["mouse-"+t.button]=!0,this.prevMousePos.set([t.clientX,t.clientY])}onMouseUp(t){this.keyDownStatus["mouse-"+t.button]=!1}onMouseMove(t){this.mousePos.set(o.fromValues(t.clientX,t.clientY))}onMouseWheel(t){window.setMoveSpeed(this.moveSpeed*=t.deltaY<0?1.1:.9)}};class Ye{static async getGeneratedSceneList(){return[{label:"Cube fractal",getScene:async t=>Ye.generateCubeFractal(t),loadType:"preloaded"},{label:"Pyramid fractal",getScene:async t=>Ye.generatePyramidFractal(t),loadType:"preloaded"}]}static async getPrebuiltSceneList(){try{return(await Ye.fetchPrebuiltScenes()).map(t=>({label:`${t.fileName} (${t.size})`,downloadPath:t.absolutePath,loadType:"stream"}))}catch(t){return console.error("Could not fetch prebuilt scenes :(",t),[]}}static async fetchPrebuiltScenes(){const t="https://allaboutsteinsgate.info/dev/dagger/scenes/",e=await fetch(t+"?C=N;O=A"),n=await e.text(),r=(new DOMParser).parseFromString(n,"text/html");return Array.from(r.querySelectorAll("tr")).slice(3,-1).map(e=>({fileName:e.childNodes[1].innerText.trim().replace(".svdag",""),absolutePath:`${t}${e.querySelector("a").href.split("/").pop()}`,size:e.childNodes[3].innerText}))}static generateBaseFractal(t,e,n){return t.bboxStart.set([0,0,0]),t.bboxEnd.set([100,100,100]),a.sub(t.bboxCenter,t.bboxEnd,t.bboxStart),a.scaleAndAdd(t.bboxCenter,t.bboxStart,t.bboxCenter,.5),t.rootSide=100,t.nLevels=20,t.nNodes=e,t.nodes=n,t}static generatePyramidFractal(t){return t.renderPreferences={renderMode:He.ITERATIONS,maxIterations:100,spawnPosition:a.fromValues(125,125,125)},Ye.generateBaseFractal(t,1,new Uint32Array([232,0,0,0,0]))}static generateCubeFractal(t){return t.renderPreferences={renderMode:He.DIFFUSE_LIGHTING,maxIterations:30,spawnPosition:a.fromValues(150,150,150)},Ye.generateBaseFractal(t,2,new Uint32Array([255,9,9,9,9,9,9,9,9,127,0,0,0,0,0,0,0]))}}!function(t){t[t.ITERATIONS=0]="ITERATIONS",t[t.DEPTH=1]="DEPTH",t[t.DIFFUSE_LIGHTING=2]="DIFFUSE_LIGHTING",t[t.PATH_TRACING=3]="PATH_TRACING"}(He||(He={}));const We={startTime:(new Date).getTime()/1e3,time:0,frame:0,pixelTolerance:1,renderScale:1,drawLevel:1,maxIterations:250,moveSpeed:1,renderMode:He.ITERATIONS,showUniqueNodeColors:!1},Ke={...We};let Ze,Qe,Je,tn,en,nn,rn,on;const an=[],un=new Ve,sn=()=>requestAnimationFrame(yn);function cn(t){Ke.renderScale=t,Ze.width=window.innerWidth*Ke.renderScale,Ze.height=window.innerHeight*Ke.renderScale,Ze.style.transform=`translate(-50%, -50%) scale(${1/Ke.renderScale})`,document.getElementById("renderScale").value=""+Ke.renderScale}function dn(t){Ke.drawLevel=Math.max(1,Math.min(t,20)),document.getElementById("drawLevel").value=""+Ke.drawLevel}function fn(t){console.log("setting render mode",t),Ke.renderMode=t,document.getElementById("renderMode").value=""+Ke.renderMode}function hn(t){Ke.moveSpeed="number"==typeof t?t:parseFloat(t),document.getElementById("moveSpeed").value=Ke.moveSpeed.toFixed(1),nn.moveSpeed=Ke.moveSpeed}function ln(t){Ke.maxIterations=Math.max(1,Math.min(t,1e3)),document.getElementById("maxIterations").value=Ke.maxIterations.toFixed(0)}async function mn(){const t=document.getElementById("sceneSelector"),e=parseInt(t.options[t.selectedIndex].value);void 0!==en&&Qe.deleteTexture(en);const n=(null==rn?void 0:rn.bboxCenter)||a.create();en=await async function(t){const e=t.createTexture();return t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_3D,e),t.texParameteri(t.TEXTURE_3D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_3D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_3D,t.TEXTURE_WRAP_S,t.REPEAT),t.texParameteri(t.TEXTURE_3D,t.TEXTURE_WRAP_T,t.REPEAT),t.texParameteri(t.TEXTURE_3D,t.TEXTURE_WRAP_R,t.REPEAT),e}(Qe),rn=await Mn(an[e]),dn(rn.nLevels),(a.dist(n,rn.bboxCenter)>.001||rn.renderPreferences.spawnPosition)&&(rn.renderPreferences.spawnPosition||un.position.set(rn.bboxEnd),un.target.set(rn.bboxCenter),hn(.01*a.distance(rn.bboxStart,rn.bboxEnd))),un.updateMatrices(),nn.init(),void 0!==Je&&vn()}async function Mn(t){let e;if(console.log(`Loading "${t.label}" (${t.loadType})...`),"stream"===t.loadType)e=await async function(t){console.log("Streaming",t,"...");const e=(await fetch(t)).body.getReader(),{done:n,value:r}=await e.read(),o=new Be;o.loadChunk(r),bn(o,o.dataLoadedOffset/4);let a=Math.round(o.dataLoadedOffset/4/o.originalNodeLength*100);const i=document.getElementById("load");i.disabled=!0,i.innerText=`Load (${a}%)`;const u=()=>{console.log("Finished loading!"),i.innerText="Load",i.disabled=!1};n||a>=99?u():(async()=>{let t=new Date,n=o.dataLoadedOffset;for(;;){const{done:r,value:u}=await e.read();if(r)break;console.log(`Received ${u.byteLength} bytes (${u.length/1e6} MB)`),o.loadChunk(u),a=Math.round(o.dataLoadedOffset/4/o.originalNodeLength*100),i.innerText=`Load (${a}%)`;const s=new Date;s.getTime()-t.getTime()>1e3&&(bn(o,(o.dataLoadedOffset-n)/4),n=o.dataLoadedOffset,t=s)}bn(o,(o.dataLoadedOffset-n)/4)})().then(u);return o}(t.downloadPath);else if("fetch"===t.loadType){e=new Be;const n=await fetch(t.downloadPath);e.load(await n.arrayBuffer()),e.dataLoadedOffset=4*e.nNodes,bn(e,e.nNodes),e.renderPreferences.maxIterations=We.maxIterations}else"preloaded"===t.loadType&&(e=new Be,t.getScene(e),e.originalNodeLength=e.nodes.length,e.dataLoadedOffset=4*e.nNodes,e.initialized=!0,bn(e,e.nNodes),e.renderPreferences.maxIterations=We.maxIterations);return void 0!==e.renderPreferences.renderMode&&fn(e.renderPreferences.renderMode),e.renderPreferences.maxIterations&&ln(e.renderPreferences.maxIterations),e.renderPreferences.moveSpeed&&hn(e.renderPreferences.moveSpeed),e.renderPreferences.spawnPosition&&(un.position=e.renderPreferences.spawnPosition),console.log("Loaded!"),console.log(`Levels: ${e.nLevels}, nodes: ${e.nNodes}`),console.log(`Bbox:\n\t[${e.bboxStart}]\n\t[${e.bboxEnd}]\n\t(center: [${e.bboxCenter}])`),e}async function vn(){const t=Qe.getUniformLocation(Je,"resolution");Qe.uniform2f(t,Ze.width,Ze.height);const e=Qe.getUniformLocation(Je,"nodes");Qe.uniform1i(e,0);const n=Qe.getUniformLocation(Je,"sceneBBoxMin");Qe.uniform3fv(n,rn.bboxStart);const r=Qe.getUniformLocation(Je,"sceneBBoxMax");Qe.uniform3fv(r,rn.bboxEnd);const o=Qe.getUniformLocation(Je,"sceneCenter");Qe.uniform3fv(o,rn.bboxCenter);const a=Qe.getUniformLocation(Je,"rootHalfSide");Qe.uniform1f(a,rn.rootSide/2);const i=Qe.getUniformLocation(Je,"lightPos");Qe.uniform3fv(i,rn.bboxEnd);const u=Qe.getUniformLocation(Je,"maxIters");Qe.uniform1ui(u,Ke.maxIterations);const s=Qe.getUniformLocation(Je,"drawLevel");Qe.uniform1ui(s,Ke.drawLevel);const c=Qe.getUniformLocation(Je,"projectionFactor");var d,f;Qe.uniform1f(c,(d=Ke.pixelTolerance,f=1,1/(2*Math.tan(.5*un.fovY))/(d/(Ze.height/f))));const h=Qe.getUniformLocation(Je,"uniqueColors");Qe.uniform1i(h,Ke.showUniqueNodeColors?1:0);const l=Qe.getUniformLocation(Je,"viewerRenderMode");Qe.uniform1i(l,Ke.renderMode);const m=Qe.getUniformLocation(Je,"viewMatInv");Qe.uniformMatrix4fv(m,!1,un.viewMatInv);const M=Qe.getUniformLocation(Je,"projMatInv");Qe.uniformMatrix4fv(M,!1,un.projMatInv)}async function bn(t,e){const n=on*on,r=t.nodes.length,o=Math.ceil(r/n),a=n*o,i=t.dataLoadedOffset/4-e;if(console.log(i,t.dataLoadedOffset/4,e),0===i){if(console.log(`Initial uploading of nodes to 3D texture (Resolution: ${on} x ${on} x ${o}, nNodes: ${t.dataLoadedOffset}/${t.nodes.length})...`),t.nodes.length!=a){console.log("Resizing node buffer from ",t.nodes.length,"to",a,"(3D Texture padding)");const e=new Uint32Array(a);e.set(t.nodes),t.nodes=e}Qe.texStorage3D(Qe.TEXTURE_3D,1,Qe.R32UI,on,on,o),Qe.texSubImage3D(Qe.TEXTURE_3D,0,0,0,0,on,on,o,Qe.RED_INTEGER,Qe.UNSIGNED_INT,t.nodes)}else{const r=0,a=0,u=Math.floor(i/n),s=u,c=Math.floor(t.dataLoadedOffset/4/n),d=on,f=on,h=c-s+1,l=t.nodes.slice(a*on+s*n,on+f*on+c*n),m=Math.round(t.dataLoadedOffset/4/t.originalNodeLength*100);console.log(`Uploading data to 3D texture (${t.dataLoadedOffset/4}/${t.originalNodeLength} [${m}%])...`),console.log("#layers",o,"start",u,"chunkStart",i,"newNodes",e,"end",c,"depth",h),Qe.texSubImage3D(Qe.TEXTURE_3D,0,r,a,u,d,f,h,Qe.RED_INTEGER,Qe.UNSIGNED_INT,l)}}window.setRenderScale=cn.bind(void 0),window.setDrawLevel=dn.bind(void 0),window.setRenderMode=fn.bind(void 0),window.setMoveSpeed=hn.bind(void 0),window.setMaxIterations=ln.bind(void 0),window.setPixelTolerance=function(t){Ke.pixelTolerance="number"==typeof t?t:parseFloat(t),document.getElementById("pixelTolerance").value=Ke.pixelTolerance.toFixed(2)}.bind(void 0),window.setShowUniqueColors=function(t){Ke.showUniqueNodeColors=t,console.log(t)}.bind(void 0),window.loadSelectedScene=mn.bind(void 0);let gn=Date.now(),pn=0,wn=1,xn=Date.now();function yn(){Date.now()>gn+1e3&&(gn=Date.now(),document.title=`DAGger - ${pn} FPS`,wn=pn,pn=0),pn++;const t=.001*(Date.now()-xn);xn=Date.now(),nn.update(t);const e=Qe.getUniformLocation(Je,"time");Qe.uniform1f(e,(new Date).getTime()/1e3-Ke.startTime),vn(),Qe.clear(Qe.COLOR_BUFFER_BIT),Qe.viewport(0,0,Ze.width,Ze.height),Qe.drawArrays(Qe.TRIANGLES,0,3),Ke.frame++,sn()}window.addEventListener("load",(async function(){if(Ze=document.querySelector("#glCanvas"),Qe=Ze.getContext("webgl2"),cn(Ke.renderScale),null===Qe)return void alert("Unable to initialize WebGL. Your browser or machine may not support it.");console.log(Qe.getParameter(Qe.VERSION),Qe.getParameter(Qe.SHADING_LANGUAGE_VERSION),Qe.getParameter(Qe.VENDOR)),on=Qe.getParameter(Qe.MAX_3D_TEXTURE_SIZE);const t=Math.floor(Math.pow(on,3)/5);console.log(`Max 3D tex = ${on}. Max avg. nodes ~= ${t} = ${Math.round(t/1e6)} MNodes`),Qe.clearColor(0,0,0,1),Qe.clear(Qe.COLOR_BUFFER_BIT),an.push(...await Ye.getGeneratedSceneList());const e=document.querySelector("#sceneSelector"),n=(t,n)=>{const r=document.createElement("option");r.value=""+n,r.innerText=t.label,e.appendChild(r)};an.forEach(n),Ye.getPrebuiltSceneList().then(t=>{an.push(...t),e.innerHTML="",an.forEach(n)}),nn=new je(un,1),await mn(),nn.init(),[Je,tn]=await async function(t,e){const n=function(t){const e=t.createShader(t.VERTEX_SHADER);return t.shaderSource(e,"#version 300 es\n    uniform float time;\n    void main(void) {\n      vec2 outUV = vec2((gl_VertexID << 1) & 2, gl_VertexID & 2);\n      outUV = outUV * 2.0f - 1.0f;\n      // gl_Position = vec4(outUV * (1.0 / time) + vec2(cos(time * time), sin(time * time)), 0.0f, 1.0f);\n      gl_Position = vec4(outUV, 0.0f, 1.0f);\n    }\n  "),t.compileShader(e),console.log("Vert shader: ",t.getShaderInfoLog(e)||"OK"),e}(t),r=await async function(t,e){const n=t.getParameter(t.MAX_3D_TEXTURE_SIZE),r=n*n,o=await fetch("raycast.glsl");let a=await o.text();const i=`#version 300 es\n#define INNER_LEVELS ${2*e-1}u\n#define TEX3D_SIZE ${n}\n#define TEX3D_SIZE_POW2 ${r}\n`;a=i+"\n"+a.split("\n").splice(i.split("\n").length).join("\n");const u=t.createShader(t.FRAGMENT_SHADER);return t.shaderSource(u,a),t.compileShader(u),console.log("Raycast shader: ",t.getShaderInfoLog(u)||"OK"),u}(t,e);if(Je=t.createProgram(),t.attachShader(Je,n),t.attachShader(Je,r),t.linkProgram(Je),!t.getProgramParameter(Je,t.LINK_STATUS))throw"Could not compile WebGL program. \n\n"+t.getProgramInfoLog(Je);return t.useProgram(Je),[Je,r]}(Qe,rn.nLevels),vn(),Qe.enable(Qe.DEPTH_TEST),Ze.tabIndex=0,Ze.addEventListener("keydown",nn.onKeyDown.bind(nn)),Ze.addEventListener("keyup",nn.onKeyUp.bind(nn)),Ze.addEventListener("mousedown",nn.onMouseDown.bind(nn)),Ze.addEventListener("mouseup",nn.onMouseUp.bind(nn)),Ze.addEventListener("mousemove",nn.onMouseMove.bind(nn)),Ze.addEventListener("wheel",nn.onMouseWheel.bind(nn)),Ze.oncontextmenu=()=>!1,Ze.addEventListener("keydown",t=>{"1"===t.key?dn(Ke.drawLevel-1):"2"===t.key&&dn(Ke.drawLevel+1)}),setTimeout(()=>wn<40&&cn(.5),2500),sn()}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,