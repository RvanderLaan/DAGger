!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=6)}({6:function(t,n,e){"use strict";e.r(n);var r={};e.r(r),e.d(r,"create",(function(){return c})),e.d(r,"clone",(function(){return d})),e.d(r,"copy",(function(){return f})),e.d(r,"fromValues",(function(){return h})),e.d(r,"set",(function(){return l})),e.d(r,"identity",(function(){return m})),e.d(r,"transpose",(function(){return M})),e.d(r,"invert",(function(){return v})),e.d(r,"adjoint",(function(){return b})),e.d(r,"determinant",(function(){return p})),e.d(r,"multiply",(function(){return g})),e.d(r,"translate",(function(){return w})),e.d(r,"scale",(function(){return y})),e.d(r,"rotate",(function(){return x})),e.d(r,"rotateX",(function(){return S})),e.d(r,"rotateY",(function(){return E})),e.d(r,"rotateZ",(function(){return D})),e.d(r,"fromTranslation",(function(){return T})),e.d(r,"fromScaling",(function(){return I})),e.d(r,"fromRotation",(function(){return L})),e.d(r,"fromXRotation",(function(){return P})),e.d(r,"fromYRotation",(function(){return A})),e.d(r,"fromZRotation",(function(){return R})),e.d(r,"fromRotationTranslation",(function(){return U})),e.d(r,"fromQuat2",(function(){return _})),e.d(r,"getTranslation",(function(){return N})),e.d(r,"getScaling",(function(){return O})),e.d(r,"getRotation",(function(){return C})),e.d(r,"fromRotationTranslationScale",(function(){return F})),e.d(r,"fromRotationTranslationScaleOrigin",(function(){return $})),e.d(r,"fromQuat",(function(){return q})),e.d(r,"frustum",(function(){return X})),e.d(r,"perspective",(function(){return k})),e.d(r,"perspectiveFromFieldOfView",(function(){return V})),e.d(r,"ortho",(function(){return z})),e.d(r,"lookAt",(function(){return B})),e.d(r,"targetTo",(function(){return G})),e.d(r,"str",(function(){return j})),e.d(r,"frob",(function(){return H})),e.d(r,"add",(function(){return Y})),e.d(r,"subtract",(function(){return W})),e.d(r,"multiplyScalar",(function(){return K})),e.d(r,"multiplyScalarAndAdd",(function(){return Z})),e.d(r,"exactEquals",(function(){return Q})),e.d(r,"equals",(function(){return J})),e.d(r,"mul",(function(){return tt})),e.d(r,"sub",(function(){return nt}));var o={};e.r(o),e.d(o,"create",(function(){return et})),e.d(o,"clone",(function(){return rt})),e.d(o,"fromValues",(function(){return ot})),e.d(o,"copy",(function(){return at})),e.d(o,"set",(function(){return it})),e.d(o,"add",(function(){return ut})),e.d(o,"subtract",(function(){return st})),e.d(o,"multiply",(function(){return ct})),e.d(o,"divide",(function(){return dt})),e.d(o,"ceil",(function(){return ft})),e.d(o,"floor",(function(){return ht})),e.d(o,"min",(function(){return lt})),e.d(o,"max",(function(){return mt})),e.d(o,"round",(function(){return Mt})),e.d(o,"scale",(function(){return vt})),e.d(o,"scaleAndAdd",(function(){return bt})),e.d(o,"distance",(function(){return pt})),e.d(o,"squaredDistance",(function(){return gt})),e.d(o,"length",(function(){return wt})),e.d(o,"squaredLength",(function(){return yt})),e.d(o,"negate",(function(){return xt})),e.d(o,"inverse",(function(){return St})),e.d(o,"normalize",(function(){return Et})),e.d(o,"dot",(function(){return Dt})),e.d(o,"cross",(function(){return Tt})),e.d(o,"lerp",(function(){return It})),e.d(o,"random",(function(){return Lt})),e.d(o,"transformMat2",(function(){return Pt})),e.d(o,"transformMat2d",(function(){return At})),e.d(o,"transformMat3",(function(){return Rt})),e.d(o,"transformMat4",(function(){return Ut})),e.d(o,"rotate",(function(){return _t})),e.d(o,"angle",(function(){return Nt})),e.d(o,"zero",(function(){return Ot})),e.d(o,"str",(function(){return Ct})),e.d(o,"exactEquals",(function(){return Ft})),e.d(o,"equals",(function(){return $t})),e.d(o,"len",(function(){return Xt})),e.d(o,"sub",(function(){return kt})),e.d(o,"mul",(function(){return Vt})),e.d(o,"div",(function(){return zt})),e.d(o,"dist",(function(){return Bt})),e.d(o,"sqrDist",(function(){return Gt})),e.d(o,"sqrLen",(function(){return jt})),e.d(o,"forEach",(function(){return Ht}));var a={};e.r(a),e.d(a,"create",(function(){return Yt})),e.d(a,"clone",(function(){return Wt})),e.d(a,"length",(function(){return Kt})),e.d(a,"fromValues",(function(){return Zt})),e.d(a,"copy",(function(){return Qt})),e.d(a,"set",(function(){return Jt})),e.d(a,"add",(function(){return tn})),e.d(a,"subtract",(function(){return nn})),e.d(a,"multiply",(function(){return en})),e.d(a,"divide",(function(){return rn})),e.d(a,"ceil",(function(){return on})),e.d(a,"floor",(function(){return an})),e.d(a,"min",(function(){return un})),e.d(a,"max",(function(){return sn})),e.d(a,"round",(function(){return cn})),e.d(a,"scale",(function(){return dn})),e.d(a,"scaleAndAdd",(function(){return fn})),e.d(a,"distance",(function(){return hn})),e.d(a,"squaredDistance",(function(){return ln})),e.d(a,"squaredLength",(function(){return mn})),e.d(a,"negate",(function(){return Mn})),e.d(a,"inverse",(function(){return vn})),e.d(a,"normalize",(function(){return bn})),e.d(a,"dot",(function(){return pn})),e.d(a,"cross",(function(){return gn})),e.d(a,"lerp",(function(){return wn})),e.d(a,"hermite",(function(){return yn})),e.d(a,"bezier",(function(){return xn})),e.d(a,"random",(function(){return Sn})),e.d(a,"transformMat4",(function(){return En})),e.d(a,"transformMat3",(function(){return Dn})),e.d(a,"transformQuat",(function(){return Tn})),e.d(a,"rotateX",(function(){return In})),e.d(a,"rotateY",(function(){return Ln})),e.d(a,"rotateZ",(function(){return Pn})),e.d(a,"angle",(function(){return An})),e.d(a,"zero",(function(){return Rn})),e.d(a,"str",(function(){return Un})),e.d(a,"exactEquals",(function(){return _n})),e.d(a,"equals",(function(){return Nn})),e.d(a,"sub",(function(){return On})),e.d(a,"mul",(function(){return Cn})),e.d(a,"div",(function(){return Fn})),e.d(a,"dist",(function(){return $n})),e.d(a,"sqrDist",(function(){return qn})),e.d(a,"len",(function(){return Xn})),e.d(a,"sqrLen",(function(){return kn})),e.d(a,"forEach",(function(){return Vn}));var i=1e-6,u="undefined"!=typeof Float32Array?Float32Array:Array,s=Math.random;Math.PI;function c(){var t=new u(16);return u!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function d(t){var n=new u(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function f(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function h(t,n,e,r,o,a,i,s,c,d,f,h,l,m,M,v){var b=new u(16);return b[0]=t,b[1]=n,b[2]=e,b[3]=r,b[4]=o,b[5]=a,b[6]=i,b[7]=s,b[8]=c,b[9]=d,b[10]=f,b[11]=h,b[12]=l,b[13]=m,b[14]=M,b[15]=v,b}function l(t,n,e,r,o,a,i,u,s,c,d,f,h,l,m,M,v){return t[0]=n,t[1]=e,t[2]=r,t[3]=o,t[4]=a,t[5]=i,t[6]=u,t[7]=s,t[8]=c,t[9]=d,t[10]=f,t[11]=h,t[12]=l,t[13]=m,t[14]=M,t[15]=v,t}function m(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function M(t,n){if(t===n){var e=n[1],r=n[2],o=n[3],a=n[6],i=n[7],u=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=e,t[6]=n[9],t[7]=n[13],t[8]=r,t[9]=a,t[11]=n[14],t[12]=o,t[13]=i,t[14]=u}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t}function v(t,n){var e=n[0],r=n[1],o=n[2],a=n[3],i=n[4],u=n[5],s=n[6],c=n[7],d=n[8],f=n[9],h=n[10],l=n[11],m=n[12],M=n[13],v=n[14],b=n[15],p=e*u-r*i,g=e*s-o*i,w=e*c-a*i,y=r*s-o*u,x=r*c-a*u,S=o*c-a*s,E=d*M-f*m,D=d*v-h*m,T=d*b-l*m,I=f*v-h*M,L=f*b-l*M,P=h*b-l*v,A=p*P-g*L+w*I+y*T-x*D+S*E;return A?(A=1/A,t[0]=(u*P-s*L+c*I)*A,t[1]=(o*L-r*P-a*I)*A,t[2]=(M*S-v*x+b*y)*A,t[3]=(h*x-f*S-l*y)*A,t[4]=(s*T-i*P-c*D)*A,t[5]=(e*P-o*T+a*D)*A,t[6]=(v*w-m*S-b*g)*A,t[7]=(d*S-h*w+l*g)*A,t[8]=(i*L-u*T+c*E)*A,t[9]=(r*T-e*L-a*E)*A,t[10]=(m*x-M*w+b*p)*A,t[11]=(f*w-d*x-l*p)*A,t[12]=(u*D-i*I-s*E)*A,t[13]=(e*I-r*D+o*E)*A,t[14]=(M*g-m*y-v*p)*A,t[15]=(d*y-f*g+h*p)*A,t):null}function b(t,n){var e=n[0],r=n[1],o=n[2],a=n[3],i=n[4],u=n[5],s=n[6],c=n[7],d=n[8],f=n[9],h=n[10],l=n[11],m=n[12],M=n[13],v=n[14],b=n[15];return t[0]=u*(h*b-l*v)-f*(s*b-c*v)+M*(s*l-c*h),t[1]=-(r*(h*b-l*v)-f*(o*b-a*v)+M*(o*l-a*h)),t[2]=r*(s*b-c*v)-u*(o*b-a*v)+M*(o*c-a*s),t[3]=-(r*(s*l-c*h)-u*(o*l-a*h)+f*(o*c-a*s)),t[4]=-(i*(h*b-l*v)-d*(s*b-c*v)+m*(s*l-c*h)),t[5]=e*(h*b-l*v)-d*(o*b-a*v)+m*(o*l-a*h),t[6]=-(e*(s*b-c*v)-i*(o*b-a*v)+m*(o*c-a*s)),t[7]=e*(s*l-c*h)-i*(o*l-a*h)+d*(o*c-a*s),t[8]=i*(f*b-l*M)-d*(u*b-c*M)+m*(u*l-c*f),t[9]=-(e*(f*b-l*M)-d*(r*b-a*M)+m*(r*l-a*f)),t[10]=e*(u*b-c*M)-i*(r*b-a*M)+m*(r*c-a*u),t[11]=-(e*(u*l-c*f)-i*(r*l-a*f)+d*(r*c-a*u)),t[12]=-(i*(f*v-h*M)-d*(u*v-s*M)+m*(u*h-s*f)),t[13]=e*(f*v-h*M)-d*(r*v-o*M)+m*(r*h-o*f),t[14]=-(e*(u*v-s*M)-i*(r*v-o*M)+m*(r*s-o*u)),t[15]=e*(u*h-s*f)-i*(r*h-o*f)+d*(r*s-o*u),t}function p(t){var n=t[0],e=t[1],r=t[2],o=t[3],a=t[4],i=t[5],u=t[6],s=t[7],c=t[8],d=t[9],f=t[10],h=t[11],l=t[12],m=t[13],M=t[14],v=t[15];return(n*i-e*a)*(f*v-h*M)-(n*u-r*a)*(d*v-h*m)+(n*s-o*a)*(d*M-f*m)+(e*u-r*i)*(c*v-h*l)-(e*s-o*i)*(c*M-f*l)+(r*s-o*u)*(c*m-d*l)}function g(t,n,e){var r=n[0],o=n[1],a=n[2],i=n[3],u=n[4],s=n[5],c=n[6],d=n[7],f=n[8],h=n[9],l=n[10],m=n[11],M=n[12],v=n[13],b=n[14],p=n[15],g=e[0],w=e[1],y=e[2],x=e[3];return t[0]=g*r+w*u+y*f+x*M,t[1]=g*o+w*s+y*h+x*v,t[2]=g*a+w*c+y*l+x*b,t[3]=g*i+w*d+y*m+x*p,g=e[4],w=e[5],y=e[6],x=e[7],t[4]=g*r+w*u+y*f+x*M,t[5]=g*o+w*s+y*h+x*v,t[6]=g*a+w*c+y*l+x*b,t[7]=g*i+w*d+y*m+x*p,g=e[8],w=e[9],y=e[10],x=e[11],t[8]=g*r+w*u+y*f+x*M,t[9]=g*o+w*s+y*h+x*v,t[10]=g*a+w*c+y*l+x*b,t[11]=g*i+w*d+y*m+x*p,g=e[12],w=e[13],y=e[14],x=e[15],t[12]=g*r+w*u+y*f+x*M,t[13]=g*o+w*s+y*h+x*v,t[14]=g*a+w*c+y*l+x*b,t[15]=g*i+w*d+y*m+x*p,t}function w(t,n,e){var r,o,a,i,u,s,c,d,f,h,l,m,M=e[0],v=e[1],b=e[2];return n===t?(t[12]=n[0]*M+n[4]*v+n[8]*b+n[12],t[13]=n[1]*M+n[5]*v+n[9]*b+n[13],t[14]=n[2]*M+n[6]*v+n[10]*b+n[14],t[15]=n[3]*M+n[7]*v+n[11]*b+n[15]):(r=n[0],o=n[1],a=n[2],i=n[3],u=n[4],s=n[5],c=n[6],d=n[7],f=n[8],h=n[9],l=n[10],m=n[11],t[0]=r,t[1]=o,t[2]=a,t[3]=i,t[4]=u,t[5]=s,t[6]=c,t[7]=d,t[8]=f,t[9]=h,t[10]=l,t[11]=m,t[12]=r*M+u*v+f*b+n[12],t[13]=o*M+s*v+h*b+n[13],t[14]=a*M+c*v+l*b+n[14],t[15]=i*M+d*v+m*b+n[15]),t}function y(t,n,e){var r=e[0],o=e[1],a=e[2];return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=n[7]*o,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=n[11]*a,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function x(t,n,e,r){var o,a,u,s,c,d,f,h,l,m,M,v,b,p,g,w,y,x,S,E,D,T,I,L,P=r[0],A=r[1],R=r[2],U=Math.hypot(P,A,R);return U<i?null:(P*=U=1/U,A*=U,R*=U,o=Math.sin(e),u=1-(a=Math.cos(e)),s=n[0],c=n[1],d=n[2],f=n[3],h=n[4],l=n[5],m=n[6],M=n[7],v=n[8],b=n[9],p=n[10],g=n[11],w=P*P*u+a,y=A*P*u+R*o,x=R*P*u-A*o,S=P*A*u-R*o,E=A*A*u+a,D=R*A*u+P*o,T=P*R*u+A*o,I=A*R*u-P*o,L=R*R*u+a,t[0]=s*w+h*y+v*x,t[1]=c*w+l*y+b*x,t[2]=d*w+m*y+p*x,t[3]=f*w+M*y+g*x,t[4]=s*S+h*E+v*D,t[5]=c*S+l*E+b*D,t[6]=d*S+m*E+p*D,t[7]=f*S+M*E+g*D,t[8]=s*T+h*I+v*L,t[9]=c*T+l*I+b*L,t[10]=d*T+m*I+p*L,t[11]=f*T+M*I+g*L,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t)}function S(t,n,e){var r=Math.sin(e),o=Math.cos(e),a=n[4],i=n[5],u=n[6],s=n[7],c=n[8],d=n[9],f=n[10],h=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=a*o+c*r,t[5]=i*o+d*r,t[6]=u*o+f*r,t[7]=s*o+h*r,t[8]=c*o-a*r,t[9]=d*o-i*r,t[10]=f*o-u*r,t[11]=h*o-s*r,t}function E(t,n,e){var r=Math.sin(e),o=Math.cos(e),a=n[0],i=n[1],u=n[2],s=n[3],c=n[8],d=n[9],f=n[10],h=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=a*o-c*r,t[1]=i*o-d*r,t[2]=u*o-f*r,t[3]=s*o-h*r,t[8]=a*r+c*o,t[9]=i*r+d*o,t[10]=u*r+f*o,t[11]=s*r+h*o,t}function D(t,n,e){var r=Math.sin(e),o=Math.cos(e),a=n[0],i=n[1],u=n[2],s=n[3],c=n[4],d=n[5],f=n[6],h=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=a*o+c*r,t[1]=i*o+d*r,t[2]=u*o+f*r,t[3]=s*o+h*r,t[4]=c*o-a*r,t[5]=d*o-i*r,t[6]=f*o-u*r,t[7]=h*o-s*r,t}function T(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function I(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function L(t,n,e){var r,o,a,u=e[0],s=e[1],c=e[2],d=Math.hypot(u,s,c);return d<i?null:(u*=d=1/d,s*=d,c*=d,r=Math.sin(n),a=1-(o=Math.cos(n)),t[0]=u*u*a+o,t[1]=s*u*a+c*r,t[2]=c*u*a-s*r,t[3]=0,t[4]=u*s*a-c*r,t[5]=s*s*a+o,t[6]=c*s*a+u*r,t[7]=0,t[8]=u*c*a+s*r,t[9]=s*c*a-u*r,t[10]=c*c*a+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function P(t,n){var e=Math.sin(n),r=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=e,t[7]=0,t[8]=0,t[9]=-e,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function A(t,n){var e=Math.sin(n),r=Math.cos(n);return t[0]=r,t[1]=0,t[2]=-e,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=e,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function R(t,n){var e=Math.sin(n),r=Math.cos(n);return t[0]=r,t[1]=e,t[2]=0,t[3]=0,t[4]=-e,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function U(t,n,e){var r=n[0],o=n[1],a=n[2],i=n[3],u=r+r,s=o+o,c=a+a,d=r*u,f=r*s,h=r*c,l=o*s,m=o*c,M=a*c,v=i*u,b=i*s,p=i*c;return t[0]=1-(l+M),t[1]=f+p,t[2]=h-b,t[3]=0,t[4]=f-p,t[5]=1-(d+M),t[6]=m+v,t[7]=0,t[8]=h+b,t[9]=m-v,t[10]=1-(d+l),t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function _(t,n){var e=new u(3),r=-n[0],o=-n[1],a=-n[2],i=n[3],s=n[4],c=n[5],d=n[6],f=n[7],h=r*r+o*o+a*a+i*i;return h>0?(e[0]=2*(s*i+f*r+c*a-d*o)/h,e[1]=2*(c*i+f*o+d*r-s*a)/h,e[2]=2*(d*i+f*a+s*o-c*r)/h):(e[0]=2*(s*i+f*r+c*a-d*o),e[1]=2*(c*i+f*o+d*r-s*a),e[2]=2*(d*i+f*a+s*o-c*r)),U(t,n,e),t}function N(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t}function O(t,n){var e=n[0],r=n[1],o=n[2],a=n[4],i=n[5],u=n[6],s=n[8],c=n[9],d=n[10];return t[0]=Math.hypot(e,r,o),t[1]=Math.hypot(a,i,u),t[2]=Math.hypot(s,c,d),t}function C(t,n){var e=new u(3);O(e,n);var r=1/e[0],o=1/e[1],a=1/e[2],i=n[0]*r,s=n[1]*o,c=n[2]*a,d=n[4]*r,f=n[5]*o,h=n[6]*a,l=n[8]*r,m=n[9]*o,M=n[10]*a,v=i+f+M,b=0;return v>0?(b=2*Math.sqrt(v+1),t[3]=.25*b,t[0]=(h-m)/b,t[1]=(l-c)/b,t[2]=(s-d)/b):i>f&&i>M?(b=2*Math.sqrt(1+i-f-M),t[3]=(h-m)/b,t[0]=.25*b,t[1]=(s+d)/b,t[2]=(l+c)/b):f>M?(b=2*Math.sqrt(1+f-i-M),t[3]=(l-c)/b,t[0]=(s+d)/b,t[1]=.25*b,t[2]=(h+m)/b):(b=2*Math.sqrt(1+M-i-f),t[3]=(s-d)/b,t[0]=(l+c)/b,t[1]=(h+m)/b,t[2]=.25*b),t}function F(t,n,e,r){var o=n[0],a=n[1],i=n[2],u=n[3],s=o+o,c=a+a,d=i+i,f=o*s,h=o*c,l=o*d,m=a*c,M=a*d,v=i*d,b=u*s,p=u*c,g=u*d,w=r[0],y=r[1],x=r[2];return t[0]=(1-(m+v))*w,t[1]=(h+g)*w,t[2]=(l-p)*w,t[3]=0,t[4]=(h-g)*y,t[5]=(1-(f+v))*y,t[6]=(M+b)*y,t[7]=0,t[8]=(l+p)*x,t[9]=(M-b)*x,t[10]=(1-(f+m))*x,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function $(t,n,e,r,o){var a=n[0],i=n[1],u=n[2],s=n[3],c=a+a,d=i+i,f=u+u,h=a*c,l=a*d,m=a*f,M=i*d,v=i*f,b=u*f,p=s*c,g=s*d,w=s*f,y=r[0],x=r[1],S=r[2],E=o[0],D=o[1],T=o[2],I=(1-(M+b))*y,L=(l+w)*y,P=(m-g)*y,A=(l-w)*x,R=(1-(h+b))*x,U=(v+p)*x,_=(m+g)*S,N=(v-p)*S,O=(1-(h+M))*S;return t[0]=I,t[1]=L,t[2]=P,t[3]=0,t[4]=A,t[5]=R,t[6]=U,t[7]=0,t[8]=_,t[9]=N,t[10]=O,t[11]=0,t[12]=e[0]+E-(I*E+A*D+_*T),t[13]=e[1]+D-(L*E+R*D+N*T),t[14]=e[2]+T-(P*E+U*D+O*T),t[15]=1,t}function q(t,n){var e=n[0],r=n[1],o=n[2],a=n[3],i=e+e,u=r+r,s=o+o,c=e*i,d=r*i,f=r*u,h=o*i,l=o*u,m=o*s,M=a*i,v=a*u,b=a*s;return t[0]=1-f-m,t[1]=d+b,t[2]=h-v,t[3]=0,t[4]=d-b,t[5]=1-c-m,t[6]=l+M,t[7]=0,t[8]=h+v,t[9]=l-M,t[10]=1-c-f,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function X(t,n,e,r,o,a,i){var u=1/(e-n),s=1/(o-r),c=1/(a-i);return t[0]=2*a*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*a*s,t[6]=0,t[7]=0,t[8]=(e+n)*u,t[9]=(o+r)*s,t[10]=(i+a)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=i*a*2*c,t[15]=0,t}function k(t,n,e,r,o){var a,i=1/Math.tan(n/2);return t[0]=i/e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=i,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0?(a=1/(r-o),t[10]=(o+r)*a,t[14]=2*o*r*a):(t[10]=-1,t[14]=-2*r),t}function V(t,n,e,r){var o=Math.tan(n.upDegrees*Math.PI/180),a=Math.tan(n.downDegrees*Math.PI/180),i=Math.tan(n.leftDegrees*Math.PI/180),u=Math.tan(n.rightDegrees*Math.PI/180),s=2/(i+u),c=2/(o+a);return t[0]=s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(i-u)*s*.5,t[9]=(o-a)*c*.5,t[10]=r/(e-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*e/(e-r),t[15]=0,t}function z(t,n,e,r,o,a,i){var u=1/(n-e),s=1/(r-o),c=1/(a-i);return t[0]=-2*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(n+e)*u,t[13]=(o+r)*s,t[14]=(i+a)*c,t[15]=1,t}function B(t,n,e,r){var o,a,u,s,c,d,f,h,l,M,v=n[0],b=n[1],p=n[2],g=r[0],w=r[1],y=r[2],x=e[0],S=e[1],E=e[2];return Math.abs(v-x)<i&&Math.abs(b-S)<i&&Math.abs(p-E)<i?m(t):(f=v-x,h=b-S,l=p-E,o=w*(l*=M=1/Math.hypot(f,h,l))-y*(h*=M),a=y*(f*=M)-g*l,u=g*h-w*f,(M=Math.hypot(o,a,u))?(o*=M=1/M,a*=M,u*=M):(o=0,a=0,u=0),s=h*u-l*a,c=l*o-f*u,d=f*a-h*o,(M=Math.hypot(s,c,d))?(s*=M=1/M,c*=M,d*=M):(s=0,c=0,d=0),t[0]=o,t[1]=s,t[2]=f,t[3]=0,t[4]=a,t[5]=c,t[6]=h,t[7]=0,t[8]=u,t[9]=d,t[10]=l,t[11]=0,t[12]=-(o*v+a*b+u*p),t[13]=-(s*v+c*b+d*p),t[14]=-(f*v+h*b+l*p),t[15]=1,t)}function G(t,n,e,r){var o=n[0],a=n[1],i=n[2],u=r[0],s=r[1],c=r[2],d=o-e[0],f=a-e[1],h=i-e[2],l=d*d+f*f+h*h;l>0&&(d*=l=1/Math.sqrt(l),f*=l,h*=l);var m=s*h-c*f,M=c*d-u*h,v=u*f-s*d;return(l=m*m+M*M+v*v)>0&&(m*=l=1/Math.sqrt(l),M*=l,v*=l),t[0]=m,t[1]=M,t[2]=v,t[3]=0,t[4]=f*v-h*M,t[5]=h*m-d*v,t[6]=d*M-f*m,t[7]=0,t[8]=d,t[9]=f,t[10]=h,t[11]=0,t[12]=o,t[13]=a,t[14]=i,t[15]=1,t}function j(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function H(t){return Math.hypot(t[0],t[1],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function Y(t,n,e){return t[0]=n[0]+e[0],t[1]=n[1]+e[1],t[2]=n[2]+e[2],t[3]=n[3]+e[3],t[4]=n[4]+e[4],t[5]=n[5]+e[5],t[6]=n[6]+e[6],t[7]=n[7]+e[7],t[8]=n[8]+e[8],t[9]=n[9]+e[9],t[10]=n[10]+e[10],t[11]=n[11]+e[11],t[12]=n[12]+e[12],t[13]=n[13]+e[13],t[14]=n[14]+e[14],t[15]=n[15]+e[15],t}function W(t,n,e){return t[0]=n[0]-e[0],t[1]=n[1]-e[1],t[2]=n[2]-e[2],t[3]=n[3]-e[3],t[4]=n[4]-e[4],t[5]=n[5]-e[5],t[6]=n[6]-e[6],t[7]=n[7]-e[7],t[8]=n[8]-e[8],t[9]=n[9]-e[9],t[10]=n[10]-e[10],t[11]=n[11]-e[11],t[12]=n[12]-e[12],t[13]=n[13]-e[13],t[14]=n[14]-e[14],t[15]=n[15]-e[15],t}function K(t,n,e){return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*e,t[5]=n[5]*e,t[6]=n[6]*e,t[7]=n[7]*e,t[8]=n[8]*e,t[9]=n[9]*e,t[10]=n[10]*e,t[11]=n[11]*e,t[12]=n[12]*e,t[13]=n[13]*e,t[14]=n[14]*e,t[15]=n[15]*e,t}function Z(t,n,e,r){return t[0]=n[0]+e[0]*r,t[1]=n[1]+e[1]*r,t[2]=n[2]+e[2]*r,t[3]=n[3]+e[3]*r,t[4]=n[4]+e[4]*r,t[5]=n[5]+e[5]*r,t[6]=n[6]+e[6]*r,t[7]=n[7]+e[7]*r,t[8]=n[8]+e[8]*r,t[9]=n[9]+e[9]*r,t[10]=n[10]+e[10]*r,t[11]=n[11]+e[11]*r,t[12]=n[12]+e[12]*r,t[13]=n[13]+e[13]*r,t[14]=n[14]+e[14]*r,t[15]=n[15]+e[15]*r,t}function Q(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]}function J(t,n){var e=t[0],r=t[1],o=t[2],a=t[3],u=t[4],s=t[5],c=t[6],d=t[7],f=t[8],h=t[9],l=t[10],m=t[11],M=t[12],v=t[13],b=t[14],p=t[15],g=n[0],w=n[1],y=n[2],x=n[3],S=n[4],E=n[5],D=n[6],T=n[7],I=n[8],L=n[9],P=n[10],A=n[11],R=n[12],U=n[13],_=n[14],N=n[15];return Math.abs(e-g)<=i*Math.max(1,Math.abs(e),Math.abs(g))&&Math.abs(r-w)<=i*Math.max(1,Math.abs(r),Math.abs(w))&&Math.abs(o-y)<=i*Math.max(1,Math.abs(o),Math.abs(y))&&Math.abs(a-x)<=i*Math.max(1,Math.abs(a),Math.abs(x))&&Math.abs(u-S)<=i*Math.max(1,Math.abs(u),Math.abs(S))&&Math.abs(s-E)<=i*Math.max(1,Math.abs(s),Math.abs(E))&&Math.abs(c-D)<=i*Math.max(1,Math.abs(c),Math.abs(D))&&Math.abs(d-T)<=i*Math.max(1,Math.abs(d),Math.abs(T))&&Math.abs(f-I)<=i*Math.max(1,Math.abs(f),Math.abs(I))&&Math.abs(h-L)<=i*Math.max(1,Math.abs(h),Math.abs(L))&&Math.abs(l-P)<=i*Math.max(1,Math.abs(l),Math.abs(P))&&Math.abs(m-A)<=i*Math.max(1,Math.abs(m),Math.abs(A))&&Math.abs(M-R)<=i*Math.max(1,Math.abs(M),Math.abs(R))&&Math.abs(v-U)<=i*Math.max(1,Math.abs(v),Math.abs(U))&&Math.abs(b-_)<=i*Math.max(1,Math.abs(b),Math.abs(_))&&Math.abs(p-N)<=i*Math.max(1,Math.abs(p),Math.abs(N))}Math.hypot||(Math.hypot=function(){for(var t=0,n=arguments.length;n--;)t+=arguments[n]*arguments[n];return Math.sqrt(t)});var tt=g,nt=W;function et(){var t=new u(2);return u!=Float32Array&&(t[0]=0,t[1]=0),t}function rt(t){var n=new u(2);return n[0]=t[0],n[1]=t[1],n}function ot(t,n){var e=new u(2);return e[0]=t,e[1]=n,e}function at(t,n){return t[0]=n[0],t[1]=n[1],t}function it(t,n,e){return t[0]=n,t[1]=e,t}function ut(t,n,e){return t[0]=n[0]+e[0],t[1]=n[1]+e[1],t}function st(t,n,e){return t[0]=n[0]-e[0],t[1]=n[1]-e[1],t}function ct(t,n,e){return t[0]=n[0]*e[0],t[1]=n[1]*e[1],t}function dt(t,n,e){return t[0]=n[0]/e[0],t[1]=n[1]/e[1],t}function ft(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t}function ht(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t}function lt(t,n,e){return t[0]=Math.min(n[0],e[0]),t[1]=Math.min(n[1],e[1]),t}function mt(t,n,e){return t[0]=Math.max(n[0],e[0]),t[1]=Math.max(n[1],e[1]),t}function Mt(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t}function vt(t,n,e){return t[0]=n[0]*e,t[1]=n[1]*e,t}function bt(t,n,e,r){return t[0]=n[0]+e[0]*r,t[1]=n[1]+e[1]*r,t}function pt(t,n){var e=n[0]-t[0],r=n[1]-t[1];return Math.hypot(e,r)}function gt(t,n){var e=n[0]-t[0],r=n[1]-t[1];return e*e+r*r}function wt(t){var n=t[0],e=t[1];return Math.hypot(n,e)}function yt(t){var n=t[0],e=t[1];return n*n+e*e}function xt(t,n){return t[0]=-n[0],t[1]=-n[1],t}function St(t,n){return t[0]=1/n[0],t[1]=1/n[1],t}function Et(t,n){var e=n[0],r=n[1],o=e*e+r*r;return o>0&&(o=1/Math.sqrt(o)),t[0]=n[0]*o,t[1]=n[1]*o,t}function Dt(t,n){return t[0]*n[0]+t[1]*n[1]}function Tt(t,n,e){var r=n[0]*e[1]-n[1]*e[0];return t[0]=t[1]=0,t[2]=r,t}function It(t,n,e,r){var o=n[0],a=n[1];return t[0]=o+r*(e[0]-o),t[1]=a+r*(e[1]-a),t}function Lt(t,n){n=n||1;var e=2*s()*Math.PI;return t[0]=Math.cos(e)*n,t[1]=Math.sin(e)*n,t}function Pt(t,n,e){var r=n[0],o=n[1];return t[0]=e[0]*r+e[2]*o,t[1]=e[1]*r+e[3]*o,t}function At(t,n,e){var r=n[0],o=n[1];return t[0]=e[0]*r+e[2]*o+e[4],t[1]=e[1]*r+e[3]*o+e[5],t}function Rt(t,n,e){var r=n[0],o=n[1];return t[0]=e[0]*r+e[3]*o+e[6],t[1]=e[1]*r+e[4]*o+e[7],t}function Ut(t,n,e){var r=n[0],o=n[1];return t[0]=e[0]*r+e[4]*o+e[12],t[1]=e[1]*r+e[5]*o+e[13],t}function _t(t,n,e,r){var o=n[0]-e[0],a=n[1]-e[1],i=Math.sin(r),u=Math.cos(r);return t[0]=o*u-a*i+e[0],t[1]=o*i+a*u+e[1],t}function Nt(t,n){var e=t[0],r=t[1],o=n[0],a=n[1],i=e*e+r*r;i>0&&(i=1/Math.sqrt(i));var u=o*o+a*a;u>0&&(u=1/Math.sqrt(u));var s=(e*o+r*a)*i*u;return s>1?0:s<-1?Math.PI:Math.acos(s)}function Ot(t){return t[0]=0,t[1]=0,t}function Ct(t){return"vec2("+t[0]+", "+t[1]+")"}function Ft(t,n){return t[0]===n[0]&&t[1]===n[1]}function $t(t,n){var e=t[0],r=t[1],o=n[0],a=n[1];return Math.abs(e-o)<=i*Math.max(1,Math.abs(e),Math.abs(o))&&Math.abs(r-a)<=i*Math.max(1,Math.abs(r),Math.abs(a))}var qt,Xt=wt,kt=st,Vt=ct,zt=dt,Bt=pt,Gt=gt,jt=yt,Ht=(qt=et(),function(t,n,e,r,o,a){var i,u;for(n||(n=2),e||(e=0),u=r?Math.min(r*n+e,t.length):t.length,i=e;i<u;i+=n)qt[0]=t[i],qt[1]=t[i+1],o(qt,qt,a),t[i]=qt[0],t[i+1]=qt[1];return t});function Yt(){var t=new u(3);return u!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function Wt(t){var n=new u(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n}function Kt(t){var n=t[0],e=t[1],r=t[2];return Math.hypot(n,e,r)}function Zt(t,n,e){var r=new u(3);return r[0]=t,r[1]=n,r[2]=e,r}function Qt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function Jt(t,n,e,r){return t[0]=n,t[1]=e,t[2]=r,t}function tn(t,n,e){return t[0]=n[0]+e[0],t[1]=n[1]+e[1],t[2]=n[2]+e[2],t}function nn(t,n,e){return t[0]=n[0]-e[0],t[1]=n[1]-e[1],t[2]=n[2]-e[2],t}function en(t,n,e){return t[0]=n[0]*e[0],t[1]=n[1]*e[1],t[2]=n[2]*e[2],t}function rn(t,n,e){return t[0]=n[0]/e[0],t[1]=n[1]/e[1],t[2]=n[2]/e[2],t}function on(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t}function an(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t}function un(t,n,e){return t[0]=Math.min(n[0],e[0]),t[1]=Math.min(n[1],e[1]),t[2]=Math.min(n[2],e[2]),t}function sn(t,n,e){return t[0]=Math.max(n[0],e[0]),t[1]=Math.max(n[1],e[1]),t[2]=Math.max(n[2],e[2]),t}function cn(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t}function dn(t,n,e){return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t}function fn(t,n,e,r){return t[0]=n[0]+e[0]*r,t[1]=n[1]+e[1]*r,t[2]=n[2]+e[2]*r,t}function hn(t,n){var e=n[0]-t[0],r=n[1]-t[1],o=n[2]-t[2];return Math.hypot(e,r,o)}function ln(t,n){var e=n[0]-t[0],r=n[1]-t[1],o=n[2]-t[2];return e*e+r*r+o*o}function mn(t){var n=t[0],e=t[1],r=t[2];return n*n+e*e+r*r}function Mn(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function vn(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t}function bn(t,n){var e=n[0],r=n[1],o=n[2],a=e*e+r*r+o*o;return a>0&&(a=1/Math.sqrt(a)),t[0]=n[0]*a,t[1]=n[1]*a,t[2]=n[2]*a,t}function pn(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function gn(t,n,e){var r=n[0],o=n[1],a=n[2],i=e[0],u=e[1],s=e[2];return t[0]=o*s-a*u,t[1]=a*i-r*s,t[2]=r*u-o*i,t}function wn(t,n,e,r){var o=n[0],a=n[1],i=n[2];return t[0]=o+r*(e[0]-o),t[1]=a+r*(e[1]-a),t[2]=i+r*(e[2]-i),t}function yn(t,n,e,r,o,a){var i=a*a,u=i*(2*a-3)+1,s=i*(a-2)+a,c=i*(a-1),d=i*(3-2*a);return t[0]=n[0]*u+e[0]*s+r[0]*c+o[0]*d,t[1]=n[1]*u+e[1]*s+r[1]*c+o[1]*d,t[2]=n[2]*u+e[2]*s+r[2]*c+o[2]*d,t}function xn(t,n,e,r,o,a){var i=1-a,u=i*i,s=a*a,c=u*i,d=3*a*u,f=3*s*i,h=s*a;return t[0]=n[0]*c+e[0]*d+r[0]*f+o[0]*h,t[1]=n[1]*c+e[1]*d+r[1]*f+o[1]*h,t[2]=n[2]*c+e[2]*d+r[2]*f+o[2]*h,t}function Sn(t,n){n=n||1;var e=2*s()*Math.PI,r=2*s()-1,o=Math.sqrt(1-r*r)*n;return t[0]=Math.cos(e)*o,t[1]=Math.sin(e)*o,t[2]=r*n,t}function En(t,n,e){var r=n[0],o=n[1],a=n[2],i=e[3]*r+e[7]*o+e[11]*a+e[15];return i=i||1,t[0]=(e[0]*r+e[4]*o+e[8]*a+e[12])/i,t[1]=(e[1]*r+e[5]*o+e[9]*a+e[13])/i,t[2]=(e[2]*r+e[6]*o+e[10]*a+e[14])/i,t}function Dn(t,n,e){var r=n[0],o=n[1],a=n[2];return t[0]=r*e[0]+o*e[3]+a*e[6],t[1]=r*e[1]+o*e[4]+a*e[7],t[2]=r*e[2]+o*e[5]+a*e[8],t}function Tn(t,n,e){var r=e[0],o=e[1],a=e[2],i=e[3],u=n[0],s=n[1],c=n[2],d=o*c-a*s,f=a*u-r*c,h=r*s-o*u,l=o*h-a*f,m=a*d-r*h,M=r*f-o*d,v=2*i;return d*=v,f*=v,h*=v,l*=2,m*=2,M*=2,t[0]=u+d+l,t[1]=s+f+m,t[2]=c+h+M,t}function In(t,n,e,r){var o=[],a=[];return o[0]=n[0]-e[0],o[1]=n[1]-e[1],o[2]=n[2]-e[2],a[0]=o[0],a[1]=o[1]*Math.cos(r)-o[2]*Math.sin(r),a[2]=o[1]*Math.sin(r)+o[2]*Math.cos(r),t[0]=a[0]+e[0],t[1]=a[1]+e[1],t[2]=a[2]+e[2],t}function Ln(t,n,e,r){var o=[],a=[];return o[0]=n[0]-e[0],o[1]=n[1]-e[1],o[2]=n[2]-e[2],a[0]=o[2]*Math.sin(r)+o[0]*Math.cos(r),a[1]=o[1],a[2]=o[2]*Math.cos(r)-o[0]*Math.sin(r),t[0]=a[0]+e[0],t[1]=a[1]+e[1],t[2]=a[2]+e[2],t}function Pn(t,n,e,r){var o=[],a=[];return o[0]=n[0]-e[0],o[1]=n[1]-e[1],o[2]=n[2]-e[2],a[0]=o[0]*Math.cos(r)-o[1]*Math.sin(r),a[1]=o[0]*Math.sin(r)+o[1]*Math.cos(r),a[2]=o[2],t[0]=a[0]+e[0],t[1]=a[1]+e[1],t[2]=a[2]+e[2],t}function An(t,n){var e=Zt(t[0],t[1],t[2]),r=Zt(n[0],n[1],n[2]);bn(e,e),bn(r,r);var o=pn(e,r);return o>1?0:o<-1?Math.PI:Math.acos(o)}function Rn(t){return t[0]=0,t[1]=0,t[2]=0,t}function Un(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function _n(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]}function Nn(t,n){var e=t[0],r=t[1],o=t[2],a=n[0],u=n[1],s=n[2];return Math.abs(e-a)<=i*Math.max(1,Math.abs(e),Math.abs(a))&&Math.abs(r-u)<=i*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(o-s)<=i*Math.max(1,Math.abs(o),Math.abs(s))}var On=nn,Cn=en,Fn=rn,$n=hn,qn=ln,Xn=Kt,kn=mn,Vn=function(){var t=Yt();return function(n,e,r,o,a,i){var u,s;for(e||(e=3),r||(r=0),s=o?Math.min(o*e+r,n.length):n.length,u=r;u<s;u+=e)t[0]=n[u],t[1]=n[u+1],t[2]=n[u+2],a(t,t,i),n[u]=t[0],n[u+1]=t[1],n[u+2]=t[2];return n}}();function zn(t){let n=t;return n=((240&(n=((204&(n=((170&n)>>1)+(85&n)))>>2)+(51&n)))>>4)+(15&n)}class Bn{constructor(){this.bboxStart=a.create(),this.bboxEnd=a.create(),this.bboxCenter=a.create()}}class Gn extends Bn{constructor(){super(...arguments),this.initialized=!1,this.dataLoadedOffset=0,this.renderPreferences={}}load(t){let n=this.parseHeader(t);this.nodes.set(new Uint32Array(t.slice(n)))}parseHeader(t){let n=0;this.bboxStart.set(new Float32Array(t.slice(n,n+12))),n+=12,this.bboxEnd.set(new Float32Array(t.slice(n,n+12))),n+=12,this.rootSide=new Float32Array(t.slice(n,n+4))[0],n+=4,this.nLevels=new Uint32Array(t.slice(n,n+4))[0],n+=4,this.nNodes=new Uint32Array(t.slice(n,n+4))[0],n+=4;new Uint32Array(t.slice(n,n+4))[0];n+=4;const e=new Uint32Array(t.slice(n,n+4))[0];return n+=4,this.nodes=new Uint32Array(e),a.sub(this.bboxCenter,this.bboxEnd,this.bboxStart),a.scaleAndAdd(this.bboxCenter,this.bboxStart,this.bboxCenter,.5),n}loadChunk(t){if(this.initialized)console.log(`Loading chunk containing ${t.length} bytes...`),console.log(this.nodes.length,this.dataLoadedOffset/4),this.nodes.set(new Uint32Array(t.buffer),this.dataLoadedOffset/4),this.dataLoadedOffset+=t.length;else{const n=this.parseHeader(t.buffer);this.initialized=!0,(t.length-n)/4!==this.nodes.length&&(console.log("pre",this.nodes),this.nodes.fill(Math.pow(2,31)-1),console.log("post",this.nodes)),this.loadChunk(t.slice(n))}}castRay(t,n,e=100){const r=this.rootSide/Math.pow(2,this.nLevels-1),o=a.copy(a.create(),t);for(let t=0;t<e;t++){a.scaleAndAdd(o,o,n,r);const t=this.getVoxel(o);if(t)return Object.assign(Object.assign({},t),{maxRayLength:r*e})}return null}getVoxel(t){const n=a.create();n.set(this.bboxCenter);let e=0,r=this.rootSide/2;for(let o=0;o<this.nLevels;o++){const a=(t[0]>n[0]?4:0)+(t[1]>n[1]?2:0)+(t[2]>n[2]?1:0),i=this.nodes[e];if(!(0!=(i&1<<a)))return null;if(o===this.nLevels-1)return{nodeIndex:e,hitPos:n};r/=2,n[0]+=t[0]>n[0]?r:-r,n[1]+=t[1]>n[1]?r:-r,n[2]+=t[2]>n[2]?r:-r;const u=zn(i>>a);e=this.nodes[e+u]}return null}}var jn=class{constructor(){this.position=a.create(),this.target=a.create(),this.upDir=a.create(),this.viewMat=r.create(),this.viewMatInv=r.create(),this.projMat=r.create(),this.projMatInv=r.create(),this.fovY=1.0471975511966667,a.set(this.upDir,0,1,0)}updateMatrices(){r.lookAt(this.viewMat,this.position,this.target,this.upDir),r.perspective(this.projMat,this.fovY,window.innerWidth/window.innerHeight,.1,1),r.invert(this.projMatInv,this.projMat),r.invert(this.viewMatInv,this.viewMat)}updatePosition(){const t=a.subtract(a.create(),this.position,this.target);console.log(t),a.transformMat4(this.position,t,this.viewMat),a.add(this.position,this.position,this.target)}};var Hn=class{constructor(t,n){this.camera=t,this.moveSpeed=n,this.prevMousePos=o.create(),this.mousePos=o.create(),this.tmpDir=a.create(),this.tmpRotMat=r.create(),this.radius=a.dist(this.camera.position,this.camera.target),this.keyDownStatus={},a.normalize(this.tmpDir,a.sub(this.tmpDir,this.camera.target,this.camera.position))}update(t){let n=!1;if(this.keyDownStatus.shift&&(t*=10),this.keyDownStatus.w&&(n=!0,a.normalize(this.tmpDir,a.sub(this.tmpDir,this.camera.target,this.camera.position)),this.moveInDirection(this.tmpDir,this.moveSpeed*t)),this.keyDownStatus.s&&(n=!0,a.normalize(this.tmpDir,a.sub(this.tmpDir,this.camera.target,this.camera.position)),this.moveInDirection(this.tmpDir,-this.moveSpeed*t)),this.keyDownStatus.a&&(n=!0,a.cross(this.tmpDir,a.normalize(this.tmpDir,a.sub(this.tmpDir,this.camera.position,this.camera.target)),this.camera.upDir),this.moveInDirection(this.tmpDir,this.moveSpeed*t)),this.keyDownStatus.d&&(n=!0,a.cross(this.tmpDir,a.normalize(this.tmpDir,a.sub(this.tmpDir,this.camera.position,this.camera.target)),this.camera.upDir),this.moveInDirection(this.tmpDir,-this.moveSpeed*t)),this.keyDownStatus.q&&(n=!0,a.normalize(this.tmpDir,a.sub(this.tmpDir,this.camera.target,this.camera.position)),this.rotateAlongLocalY(.5,t)),this.keyDownStatus.e&&(n=!0,a.normalize(this.tmpDir,a.sub(this.tmpDir,this.camera.target,this.camera.position)),this.rotateAlongLocalY(.5,-t)),this.keyDownStatus["mouse-0"]){n=!0;const t=o.subtract(o.create(),this.prevMousePos,this.mousePos);o.divide(t,t,[document.documentElement.clientWidth,document.documentElement.clientHeight]);const e=5;this.rotateAlongLocalY(t[0],e),this.rotateAlongLocalX(t[1],-e)}n&&this.camera.updateMatrices(),this.prevMousePos.set(this.mousePos)}moveInDirection(t,n){a.scaleAndAdd(this.camera.position,this.camera.position,t,n),a.scaleAndAdd(this.camera.target,this.camera.target,t,n)}rotateAlongLocalY(t,n){const e=r.rotate(r.create(),r.identity(r.create()),t*n,this.camera.upDir);a.transformMat4(this.tmpDir,this.tmpDir,e),a.scaleAndAdd(this.camera.target,this.camera.position,this.tmpDir,this.radius)}rotateAlongLocalX(t,n){const e=a.subtract(a.create(),this.camera.target,this.camera.position);a.normalize(e,e);const o=a.create();a.cross(o,this.camera.upDir,e),r.rotate(this.tmpRotMat,r.identity(this.tmpRotMat),t*n,o),a.transformMat4(this.tmpDir,this.tmpDir,this.tmpRotMat),a.scaleAndAdd(this.camera.target,this.camera.position,this.tmpDir,this.radius)}rotateAroundPivot(t){}onKeyDown(t){this.keyDownStatus[t.key.toLocaleLowerCase()]=!0}onKeyUp(t){this.keyDownStatus[t.key.toLocaleLowerCase()]=!1}onMouseDown(t){this.keyDownStatus[`mouse-${t.button}`]=!0,this.prevMousePos.set([t.clientX,t.clientY])}onMouseUp(t){this.keyDownStatus[`mouse-${t.button}`]=!1}onMouseMove(t){this.mousePos.set(o.fromValues(t.clientX,t.clientY))}onMouseWheel(t){window.setMoveSpeed(this.moveSpeed*=t.deltaY<0?1.1:.9)}},Yn=function(t,n,e,r){return new(e||(e=Promise))((function(o,a){function i(t){try{s(r.next(t))}catch(t){a(t)}}function u(t){try{s(r.throw(t))}catch(t){a(t)}}function s(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(i,u)}s((r=r.apply(t,n||[])).next())}))};class Wn{static getSceneList(){return Yn(this,void 0,void 0,(function*(){const t=[{label:"Cube fractal",getScene:t=>Yn(this,void 0,void 0,(function*(){return Wn.generateCubeFractal(t)})),loadType:"preloaded"},{label:"Pyramid fractal",getScene:t=>Yn(this,void 0,void 0,(function*(){return Wn.generatePyramidFractal(t)})),loadType:"preloaded"}];try{const n=yield Wn.fetchPrebuiltScenes();return[...t,...n.map(t=>({label:`${t.fileName} (${t.size})`,downloadPath:t.absolutePath,loadType:"fetch"}))]}catch(n){return console.error("Could not fetch prebuilt scenes :(",n),t}}))}static fetchPrebuiltScenes(){return Yn(this,void 0,void 0,(function*(){const t=`${location.protocol}//45.77.96.202/dagger/scenes/`,n=yield fetch(`${t}?C=N;O=A`),e=yield n.text(),r=(new DOMParser).parseFromString(e,"text/html");return Array.from(r.querySelectorAll("tr")).slice(3,-1).map(n=>({fileName:n.childNodes[1].innerText,absolutePath:`${t}${n.querySelector("a").href.split("/").pop()}`,size:n.childNodes[3].innerText}))}))}static generateBaseFractal(t,n,e){return t.bboxStart.set([0,0,0]),t.bboxEnd.set([100,100,100]),a.sub(t.bboxCenter,t.bboxEnd,t.bboxStart),a.scaleAndAdd(t.bboxCenter,t.bboxStart,t.bboxCenter,.5),t.rootSide=100,t.nLevels=20,t.nNodes=n,t.nodes=e,t}static generatePyramidFractal(t){return t.renderPreferences={renderMode:Kn.ITERATIONS,maxIterations:100,spawnPosition:a.fromValues(125,125,125)},Wn.generateBaseFractal(t,1,new Uint32Array([232,0,0,0,0]))}static generateCubeFractal(t){return t.renderPreferences={renderMode:Kn.DIFFUSE_LIGHTING,maxIterations:30,spawnPosition:a.fromValues(150,150,150)},Wn.generateBaseFractal(t,2,new Uint32Array([255,9,9,9,9,9,9,9,9,127,0,0,0,0,0,0,0]))}}e.d(n,"RenderMode",(function(){return Kn})),e.d(n,"rerender",(function(){return de})),e.d(n,"loadScene",(function(){return ve}));var Kn,Zn=function(t,n,e,r){return new(e||(e=Promise))((function(o,a){function i(t){try{s(r.next(t))}catch(t){a(t)}}function u(t){try{s(r.throw(t))}catch(t){a(t)}}function s(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(i,u)}s((r=r.apply(t,n||[])).next())}))};!function(t){t[t.ITERATIONS=0]="ITERATIONS",t[t.DEPTH=1]="DEPTH",t[t.DIFFUSE_LIGHTING=2]="DIFFUSE_LIGHTING",t[t.PATH_TRACING=3]="PATH_TRACING"}(Kn||(Kn={}));const Qn={startTime:(new Date).getTime()/1e3,time:0,frame:0,pixelTolerance:1,renderScale:1,drawLevel:1,maxIterations:250,moveSpeed:1,renderMode:Kn.ITERATIONS,showUniqueNodeColors:!1},Jn=Object.assign({},Qn);let te,ne,ee,re,oe,ae,ie,ue;const se=[],ce=new jn,de=()=>requestAnimationFrame(Ee);function fe(t){Jn.renderScale=t,te.width=window.innerWidth*Jn.renderScale,te.height=window.innerHeight*Jn.renderScale,te.style.transform=`translate(-50%, -50%) scale(${1/Jn.renderScale})`,document.getElementById("renderScale").value=`${Jn.renderScale}`}function he(t){Jn.drawLevel=t,document.getElementById("drawLevel").value=`${Jn.drawLevel}`}function le(t){console.log("setting render mode",t),Jn.renderMode=t,document.getElementById("renderMode").value=`${Jn.renderMode}`}function me(t){Jn.moveSpeed="number"==typeof t?t:parseFloat(t),document.getElementById("moveSpeed").value=Jn.moveSpeed.toFixed(1),ae.moveSpeed=Jn.moveSpeed}function Me(t){Jn.maxIterations=Math.max(1,Math.min(t,1e3)),document.getElementById("maxIterations").value=Jn.maxIterations.toFixed(0)}function ve(t){return Zn(this,void 0,void 0,(function*(){let n;if(console.log(`Loading "${t.label}" (${t.loadType})...`),"stream"===t.loadType)n=yield function(t){return Zn(this,void 0,void 0,(function*(){console.log("Streaming",t,"...");const n=(yield fetch(t)).body.getReader(),{value:e}=yield n.read(),r=new Gn;return r.loadChunk(e),ge(r,r.dataLoadedOffset),new Promise(()=>Zn(this,void 0,void 0,(function*(){let t=new Date,e=r.dataLoadedOffset;for(;;){const{done:o,value:a}=yield n.read();if(o)break;console.log(`Received ${a.byteLength} bytes (${a.length/1e6} MB)`),r.loadChunk(a);const i=new Date;i.getTime()-t.getTime()>1e3&&(ge(r,r.dataLoadedOffset-e),t=i)}ge(r,r.dataLoadedOffset-e)}))).then(()=>{console.log("Finished loading!")}),r}))}(t.downloadPath);else if("fetch"===t.loadType){n=new Gn;const e=yield fetch(t.downloadPath);n.load(yield e.arrayBuffer()),n.dataLoadedOffset=n.nNodes,ge(n,n.nNodes),n.renderPreferences.maxIterations=Qn.maxIterations}else"preloaded"===t.loadType&&(n=new Gn,t.getScene(n),n.dataLoadedOffset=n.nNodes,n.initialized=!0,ge(n,n.nNodes),n.renderPreferences.maxIterations=Qn.maxIterations);return void 0!==n.renderPreferences.renderMode&&le(n.renderPreferences.renderMode),n.renderPreferences.maxIterations&&Me(n.renderPreferences.maxIterations),n.renderPreferences.moveSpeed&&me(n.renderPreferences.moveSpeed),n.renderPreferences.spawnPosition&&(ce.position=n.renderPreferences.spawnPosition),console.log("Loaded!"),console.log(`Levels: ${n.nLevels}, nodes: ${n.nNodes}`),console.log(`Bbox:\n\t[${n.bboxStart}]\n\t[${n.bboxEnd}]\n\t(center: [${n.bboxCenter}])`),n}))}function be(){return Zn(this,void 0,void 0,(function*(){const t=ne.getUniformLocation(ee,"resolution");ne.uniform2f(t,te.width,te.height);const n=ne.getUniformLocation(ee,"nodes");ne.uniform1i(n,0);const e=ne.getUniformLocation(ee,"sceneBBoxMin");ne.uniform3fv(e,ie.bboxStart);const r=ne.getUniformLocation(ee,"sceneBBoxMax");ne.uniform3fv(r,ie.bboxEnd);const o=ne.getUniformLocation(ee,"sceneCenter");ne.uniform3fv(o,ie.bboxCenter);const a=ne.getUniformLocation(ee,"rootHalfSide");ne.uniform1f(a,ie.rootSide/2);const i=ne.getUniformLocation(ee,"lightPos");ne.uniform3fv(i,ie.bboxEnd);const u=ne.getUniformLocation(ee,"maxIters");ne.uniform1ui(u,Jn.maxIterations);const s=ne.getUniformLocation(ee,"drawLevel");ne.uniform1ui(s,Jn.drawLevel);const c=ne.getUniformLocation(ee,"projectionFactor");var d,f;ne.uniform1f(c,(d=Jn.pixelTolerance,f=1,1/(2*Math.tan(.5*ce.fovY))/(d/(te.height/f))));const h=ne.getUniformLocation(ee,"uniqueColors");ne.uniform1i(h,Jn.showUniqueNodeColors?1:0);const l=ne.getUniformLocation(ee,"viewerRenderMode");ne.uniform1i(l,Jn.renderMode);const m=ne.getUniformLocation(ee,"viewMatInv");ne.uniformMatrix4fv(m,!1,ce.viewMatInv);const M=ne.getUniformLocation(ee,"projMatInv");ne.uniformMatrix4fv(M,!1,ce.projMatInv)}))}function pe(t){return Zn(this,void 0,void 0,(function*(){const n=t.createTexture();return t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_3D,n),t.texParameteri(t.TEXTURE_3D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_3D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_3D,t.TEXTURE_WRAP_S,t.REPEAT),t.texParameteri(t.TEXTURE_3D,t.TEXTURE_WRAP_T,t.REPEAT),t.texParameteri(t.TEXTURE_3D,t.TEXTURE_WRAP_R,t.REPEAT),n}))}function ge(t,n){return Zn(this,void 0,void 0,(function*(){const e=ue*ue,r=t.nodes.length,o=Math.ceil(r/e),a=e*o,i=t.dataLoadedOffset-n;if(0===i){if(console.log(`Initial uploading of nodes to 3D texture (Resolution: ${ue} x ${ue} x ${o}, nNodes: ${t.dataLoadedOffset}/${t.nodes.length})...`),t.nodes.length!=a){console.log("Resizing node buffer from ",t.nodes.length,"to",a,"(3D Texture padding)");const n=new Uint32Array(a);n.set(t.nodes),t.nodes=n}ne.texStorage3D(ne.TEXTURE_3D,1,ne.R32UI,ue,ue,o),ne.texSubImage3D(ne.TEXTURE_3D,0,0,0,0,ue,ue,o,ne.RED_INTEGER,ne.UNSIGNED_INT,t.nodes)}else{const n=0,r=0,a=Math.floor(i/e),u=Math.floor(i/e),s=Math.floor(t.dataLoadedOffset/e),c=ue,d=ue,f=s-u,h=t.nodes.slice(r*ue+a*e,ue+d*ue+a*e);console.log(`Update uploading to 3D texture (${t.dataLoadedOffset}/${t.nodes.length} [${Math.round(t.dataLoadedOffset/t.nodes.length*100)}%])...`),console.log("Offset: ",n,r,a),ne.texStorage3D(ne.TEXTURE_3D,1,ne.R32UI,ue,ue,o),ne.texSubImage3D(ne.TEXTURE_3D,0,n,r,a,c,d,f,ne.RED_INTEGER,ne.UNSIGNED_INT,h)}}))}window.setRenderScale=fe.bind(void 0),window.setDrawLevel=he.bind(void 0),window.setRenderMode=le.bind(void 0),window.setMoveSpeed=me.bind(void 0),window.setMaxIterations=Me.bind(void 0),window.setPixelTolerance=function(t){Jn.pixelTolerance="number"==typeof t?t:parseFloat(t),document.getElementById("pixelTolerance").value=Jn.pixelTolerance.toFixed(2)}.bind(void 0),window.setShowUniqueColors=function(t){Jn.showUniqueNodeColors=t,console.log(t)}.bind(void 0),window.loadSelectedScene=function(){return Zn(this,void 0,void 0,(function*(){const t=document.getElementById("sceneSelector"),n=parseInt(t.options[t.selectedIndex].value);ne.deleteTexture(oe);const e=ie.bboxCenter;oe=yield pe(ne),he((ie=yield ve(se[n])).nLevels),(a.dist(e,ie.bboxCenter)>.001||ie.renderPreferences.spawnPosition)&&(ie.renderPreferences.spawnPosition||ce.position.set(ie.bboxEnd),ce.target.set(ie.bboxCenter),me(.01*a.distance(ie.bboxStart,ie.bboxEnd))),ce.updateMatrices(),be()}))}.bind(void 0);let we=Date.now(),ye=0,xe=1,Se=Date.now();function Ee(){Date.now()>we+1e3&&(we=Date.now(),document.title=`DAGger - ${ye} FPS`,xe=ye,ye=0),ye++;const t=.001*(Date.now()-Se);Se=Date.now(),ae.update(t);const n=ne.getUniformLocation(ee,"time");ne.uniform1f(n,(new Date).getTime()/1e3-Jn.startTime),be(),ne.clear(ne.COLOR_BUFFER_BIT),ne.viewport(0,0,te.width,te.height),ne.drawArrays(ne.TRIANGLES,0,3),Jn.frame++,de()}window.addEventListener("load",(function(){return Zn(this,void 0,void 0,(function*(){if(te=document.querySelector("#glCanvas"),ne=te.getContext("webgl2"),fe(Jn.renderScale),null===ne)return void alert("Unable to initialize WebGL. Your browser or machine may not support it.");console.log(ne.getParameter(ne.VERSION),ne.getParameter(ne.SHADING_LANGUAGE_VERSION),ne.getParameter(ne.VENDOR)),ue=ne.getParameter(ne.MAX_3D_TEXTURE_SIZE);const t=Math.floor(Math.pow(ue,3)/5);console.log(`Max 3D tex = ${ue}. Max avg. nodes ~= ${t} = ${Math.round(t/1e6)} MNodes`),ne.clearColor(0,0,0,1),ne.clear(ne.COLOR_BUFFER_BIT),se.push(...yield Wn.getSceneList());const n=document.querySelector("#sceneSelector");se.forEach((t,e)=>{const r=document.createElement("option");r.value=`${e}`,r.innerText=t.label,n.appendChild(r)}),oe=yield pe(ne),ie=yield ve(se[0]),ce.updateMatrices(),he(ie.nLevels),[ee,re]=yield function(t,n){return Zn(this,void 0,void 0,(function*(){const e=function(t){const n=t.createShader(t.VERTEX_SHADER);return t.shaderSource(n,"#version 300 es\n    uniform float time;\n    void main(void) {\n      vec2 outUV = vec2((gl_VertexID << 1) & 2, gl_VertexID & 2);\n      outUV = outUV * 2.0f - 1.0f;\n      // gl_Position = vec4(outUV * (1.0 / time) + vec2(cos(time * time), sin(time * time)), 0.0f, 1.0f);\n      gl_Position = vec4(outUV, 0.0f, 1.0f);\n    }\n  "),t.compileShader(n),console.log("Vert shader: ",t.getShaderInfoLog(n)||"OK"),n}(t),r=yield function(t,n){return Zn(this,void 0,void 0,(function*(){const e=t.getParameter(t.MAX_3D_TEXTURE_SIZE),r=e*e,o=yield fetch("raycast.glsl");let a=yield o.text();const i=`#version 300 es\n#define INNER_LEVELS ${2*n-1}u\n#define TEX3D_SIZE ${e}\n#define TEX3D_SIZE_POW2 ${r}\n`;a=i+"\n"+a.split("\n").splice(i.split("\n").length).join("\n");const u=t.createShader(t.FRAGMENT_SHADER);return t.shaderSource(u,a),t.compileShader(u),console.log("Raycast shader: ",t.getShaderInfoLog(u)||"OK"),u}))}(t,n);if(ee=t.createProgram(),t.attachShader(ee,e),t.attachShader(ee,r),t.linkProgram(ee),!t.getProgramParameter(ee,t.LINK_STATUS))throw"Could not compile WebGL program. \n\n"+t.getProgramInfoLog(ee);return t.useProgram(ee),[ee,r]}))}(ne,ie.nLevels),ne.enable(ne.DEPTH_TEST),ce.target.set(ie.bboxCenter),ce.updateMatrices(),be(),ae=new Hn(ce,1),te.tabIndex=0,te.addEventListener("keydown",ae.onKeyDown.bind(ae)),te.addEventListener("keyup",ae.onKeyUp.bind(ae)),te.addEventListener("mousedown",ae.onMouseDown.bind(ae)),te.addEventListener("mouseup",ae.onMouseUp.bind(ae)),te.addEventListener("mousemove",ae.onMouseMove.bind(ae)),te.addEventListener("wheel",ae.onMouseWheel.bind(ae)),te.oncontextmenu=()=>!1,te.addEventListener("keydown",t=>{"1"===t.key?he(Jn.drawLevel-1):"2"===t.key&&he(Jn.drawLevel+1)}),setTimeout(()=>xe<40&&fe(.5),2500),de()}))}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,