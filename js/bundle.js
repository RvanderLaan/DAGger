!function(B){var Q={};function F(n){if(Q[n])return Q[n].exports;var t=Q[n]={i:n,l:!1,exports:{}};return B[n].call(t.exports,t,t.exports,F),t.l=!0,t.exports}F.m=B,F.c=Q,F.d=function(B,Q,n){F.o(B,Q)||Object.defineProperty(B,Q,{enumerable:!0,get:n})},F.r=function(B){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(B,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(B,"__esModule",{value:!0})},F.t=function(B,Q){if(1&Q&&(B=F(B)),8&Q)return B;if(4&Q&&"object"==typeof B&&B&&B.__esModule)return B;var n=Object.create(null);if(F.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:B}),2&Q&&"string"!=typeof B)for(var t in B)F.d(n,t,function(Q){return B[Q]}.bind(null,t));return n},F.n=function(B){var Q=B&&B.__esModule?function(){return B.default}:function(){return B};return F.d(Q,"a",Q),Q},F.o=function(B,Q){return Object.prototype.hasOwnProperty.call(B,Q)},F.p="",F(F.s=6)}({6:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "RenderMode", function() { return /* binding */ RenderMode; });\n__webpack_require__.d(__webpack_exports__, "rerender", function() { return /* binding */ rerender; });\n__webpack_require__.d(__webpack_exports__, "loadScene", function() { return /* binding */ loadScene; });\n\n// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/mat4.js\nvar mat4_namespaceObject = {};\n__webpack_require__.r(mat4_namespaceObject);\n__webpack_require__.d(mat4_namespaceObject, "create", function() { return create; });\n__webpack_require__.d(mat4_namespaceObject, "clone", function() { return clone; });\n__webpack_require__.d(mat4_namespaceObject, "copy", function() { return copy; });\n__webpack_require__.d(mat4_namespaceObject, "fromValues", function() { return fromValues; });\n__webpack_require__.d(mat4_namespaceObject, "set", function() { return set; });\n__webpack_require__.d(mat4_namespaceObject, "identity", function() { return identity; });\n__webpack_require__.d(mat4_namespaceObject, "transpose", function() { return transpose; });\n__webpack_require__.d(mat4_namespaceObject, "invert", function() { return invert; });\n__webpack_require__.d(mat4_namespaceObject, "adjoint", function() { return adjoint; });\n__webpack_require__.d(mat4_namespaceObject, "determinant", function() { return determinant; });\n__webpack_require__.d(mat4_namespaceObject, "multiply", function() { return multiply; });\n__webpack_require__.d(mat4_namespaceObject, "translate", function() { return translate; });\n__webpack_require__.d(mat4_namespaceObject, "scale", function() { return mat4_scale; });\n__webpack_require__.d(mat4_namespaceObject, "rotate", function() { return rotate; });\n__webpack_require__.d(mat4_namespaceObject, "rotateX", function() { return rotateX; });\n__webpack_require__.d(mat4_namespaceObject, "rotateY", function() { return rotateY; });\n__webpack_require__.d(mat4_namespaceObject, "rotateZ", function() { return rotateZ; });\n__webpack_require__.d(mat4_namespaceObject, "fromTranslation", function() { return fromTranslation; });\n__webpack_require__.d(mat4_namespaceObject, "fromScaling", function() { return fromScaling; });\n__webpack_require__.d(mat4_namespaceObject, "fromRotation", function() { return fromRotation; });\n__webpack_require__.d(mat4_namespaceObject, "fromXRotation", function() { return fromXRotation; });\n__webpack_require__.d(mat4_namespaceObject, "fromYRotation", function() { return fromYRotation; });\n__webpack_require__.d(mat4_namespaceObject, "fromZRotation", function() { return fromZRotation; });\n__webpack_require__.d(mat4_namespaceObject, "fromRotationTranslation", function() { return fromRotationTranslation; });\n__webpack_require__.d(mat4_namespaceObject, "fromQuat2", function() { return fromQuat2; });\n__webpack_require__.d(mat4_namespaceObject, "getTranslation", function() { return getTranslation; });\n__webpack_require__.d(mat4_namespaceObject, "getScaling", function() { return getScaling; });\n__webpack_require__.d(mat4_namespaceObject, "getRotation", function() { return getRotation; });\n__webpack_require__.d(mat4_namespaceObject, "fromRotationTranslationScale", function() { return fromRotationTranslationScale; });\n__webpack_require__.d(mat4_namespaceObject, "fromRotationTranslationScaleOrigin", function() { return fromRotationTranslationScaleOrigin; });\n__webpack_require__.d(mat4_namespaceObject, "fromQuat", function() { return fromQuat; });\n__webpack_require__.d(mat4_namespaceObject, "frustum", function() { return frustum; });\n__webpack_require__.d(mat4_namespaceObject, "perspective", function() { return perspective; });\n__webpack_require__.d(mat4_namespaceObject, "perspectiveFromFieldOfView", function() { return perspectiveFromFieldOfView; });\n__webpack_require__.d(mat4_namespaceObject, "ortho", function() { return ortho; });\n__webpack_require__.d(mat4_namespaceObject, "lookAt", function() { return lookAt; });\n__webpack_require__.d(mat4_namespaceObject, "targetTo", function() { return targetTo; });\n__webpack_require__.d(mat4_namespaceObject, "str", function() { return str; });\n__webpack_require__.d(mat4_namespaceObject, "frob", function() { return frob; });\n__webpack_require__.d(mat4_namespaceObject, "add", function() { return add; });\n__webpack_require__.d(mat4_namespaceObject, "subtract", function() { return subtract; });\n__webpack_require__.d(mat4_namespaceObject, "multiplyScalar", function() { return multiplyScalar; });\n__webpack_require__.d(mat4_namespaceObject, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });\n__webpack_require__.d(mat4_namespaceObject, "exactEquals", function() { return exactEquals; });\n__webpack_require__.d(mat4_namespaceObject, "equals", function() { return mat4_equals; });\n__webpack_require__.d(mat4_namespaceObject, "mul", function() { return mul; });\n__webpack_require__.d(mat4_namespaceObject, "sub", function() { return sub; });\n\n// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/vec2.js\nvar vec2_namespaceObject = {};\n__webpack_require__.r(vec2_namespaceObject);\n__webpack_require__.d(vec2_namespaceObject, "create", function() { return vec2_create; });\n__webpack_require__.d(vec2_namespaceObject, "clone", function() { return vec2_clone; });\n__webpack_require__.d(vec2_namespaceObject, "fromValues", function() { return vec2_fromValues; });\n__webpack_require__.d(vec2_namespaceObject, "copy", function() { return vec2_copy; });\n__webpack_require__.d(vec2_namespaceObject, "set", function() { return vec2_set; });\n__webpack_require__.d(vec2_namespaceObject, "add", function() { return vec2_add; });\n__webpack_require__.d(vec2_namespaceObject, "subtract", function() { return vec2_subtract; });\n__webpack_require__.d(vec2_namespaceObject, "multiply", function() { return vec2_multiply; });\n__webpack_require__.d(vec2_namespaceObject, "divide", function() { return divide; });\n__webpack_require__.d(vec2_namespaceObject, "ceil", function() { return ceil; });\n__webpack_require__.d(vec2_namespaceObject, "floor", function() { return floor; });\n__webpack_require__.d(vec2_namespaceObject, "min", function() { return min; });\n__webpack_require__.d(vec2_namespaceObject, "max", function() { return max; });\n__webpack_require__.d(vec2_namespaceObject, "round", function() { return round; });\n__webpack_require__.d(vec2_namespaceObject, "scale", function() { return vec2_scale; });\n__webpack_require__.d(vec2_namespaceObject, "scaleAndAdd", function() { return scaleAndAdd; });\n__webpack_require__.d(vec2_namespaceObject, "distance", function() { return distance; });\n__webpack_require__.d(vec2_namespaceObject, "squaredDistance", function() { return squaredDistance; });\n__webpack_require__.d(vec2_namespaceObject, "length", function() { return vec2_length; });\n__webpack_require__.d(vec2_namespaceObject, "squaredLength", function() { return squaredLength; });\n__webpack_require__.d(vec2_namespaceObject, "negate", function() { return negate; });\n__webpack_require__.d(vec2_namespaceObject, "inverse", function() { return inverse; });\n__webpack_require__.d(vec2_namespaceObject, "normalize", function() { return normalize; });\n__webpack_require__.d(vec2_namespaceObject, "dot", function() { return dot; });\n__webpack_require__.d(vec2_namespaceObject, "cross", function() { return cross; });\n__webpack_require__.d(vec2_namespaceObject, "lerp", function() { return lerp; });\n__webpack_require__.d(vec2_namespaceObject, "random", function() { return random; });\n__webpack_require__.d(vec2_namespaceObject, "transformMat2", function() { return transformMat2; });\n__webpack_require__.d(vec2_namespaceObject, "transformMat2d", function() { return transformMat2d; });\n__webpack_require__.d(vec2_namespaceObject, "transformMat3", function() { return transformMat3; });\n__webpack_require__.d(vec2_namespaceObject, "transformMat4", function() { return transformMat4; });\n__webpack_require__.d(vec2_namespaceObject, "rotate", function() { return vec2_rotate; });\n__webpack_require__.d(vec2_namespaceObject, "angle", function() { return angle; });\n__webpack_require__.d(vec2_namespaceObject, "zero", function() { return zero; });\n__webpack_require__.d(vec2_namespaceObject, "str", function() { return vec2_str; });\n__webpack_require__.d(vec2_namespaceObject, "exactEquals", function() { return vec2_exactEquals; });\n__webpack_require__.d(vec2_namespaceObject, "equals", function() { return vec2_equals; });\n__webpack_require__.d(vec2_namespaceObject, "len", function() { return vec2_len; });\n__webpack_require__.d(vec2_namespaceObject, "sub", function() { return vec2_sub; });\n__webpack_require__.d(vec2_namespaceObject, "mul", function() { return vec2_mul; });\n__webpack_require__.d(vec2_namespaceObject, "div", function() { return div; });\n__webpack_require__.d(vec2_namespaceObject, "dist", function() { return dist; });\n__webpack_require__.d(vec2_namespaceObject, "sqrDist", function() { return sqrDist; });\n__webpack_require__.d(vec2_namespaceObject, "sqrLen", function() { return sqrLen; });\n__webpack_require__.d(vec2_namespaceObject, "forEach", function() { return forEach; });\n\n// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/vec3.js\nvar vec3_namespaceObject = {};\n__webpack_require__.r(vec3_namespaceObject);\n__webpack_require__.d(vec3_namespaceObject, "create", function() { return vec3_create; });\n__webpack_require__.d(vec3_namespaceObject, "clone", function() { return vec3_clone; });\n__webpack_require__.d(vec3_namespaceObject, "length", function() { return vec3_length; });\n__webpack_require__.d(vec3_namespaceObject, "fromValues", function() { return vec3_fromValues; });\n__webpack_require__.d(vec3_namespaceObject, "copy", function() { return vec3_copy; });\n__webpack_require__.d(vec3_namespaceObject, "set", function() { return vec3_set; });\n__webpack_require__.d(vec3_namespaceObject, "add", function() { return vec3_add; });\n__webpack_require__.d(vec3_namespaceObject, "subtract", function() { return vec3_subtract; });\n__webpack_require__.d(vec3_namespaceObject, "multiply", function() { return vec3_multiply; });\n__webpack_require__.d(vec3_namespaceObject, "divide", function() { return vec3_divide; });\n__webpack_require__.d(vec3_namespaceObject, "ceil", function() { return vec3_ceil; });\n__webpack_require__.d(vec3_namespaceObject, "floor", function() { return vec3_floor; });\n__webpack_require__.d(vec3_namespaceObject, "min", function() { return vec3_min; });\n__webpack_require__.d(vec3_namespaceObject, "max", function() { return vec3_max; });\n__webpack_require__.d(vec3_namespaceObject, "round", function() { return vec3_round; });\n__webpack_require__.d(vec3_namespaceObject, "scale", function() { return vec3_scale; });\n__webpack_require__.d(vec3_namespaceObject, "scaleAndAdd", function() { return vec3_scaleAndAdd; });\n__webpack_require__.d(vec3_namespaceObject, "distance", function() { return vec3_distance; });\n__webpack_require__.d(vec3_namespaceObject, "squaredDistance", function() { return vec3_squaredDistance; });\n__webpack_require__.d(vec3_namespaceObject, "squaredLength", function() { return vec3_squaredLength; });\n__webpack_require__.d(vec3_namespaceObject, "negate", function() { return vec3_negate; });\n__webpack_require__.d(vec3_namespaceObject, "inverse", function() { return vec3_inverse; });\n__webpack_require__.d(vec3_namespaceObject, "normalize", function() { return vec3_normalize; });\n__webpack_require__.d(vec3_namespaceObject, "dot", function() { return vec3_dot; });\n__webpack_require__.d(vec3_namespaceObject, "cross", function() { return vec3_cross; });\n__webpack_require__.d(vec3_namespaceObject, "lerp", function() { return vec3_lerp; });\n__webpack_require__.d(vec3_namespaceObject, "hermite", function() { return hermite; });\n__webpack_require__.d(vec3_namespaceObject, "bezier", function() { return bezier; });\n__webpack_require__.d(vec3_namespaceObject, "random", function() { return vec3_random; });\n__webpack_require__.d(vec3_namespaceObject, "transformMat4", function() { return vec3_transformMat4; });\n__webpack_require__.d(vec3_namespaceObject, "transformMat3", function() { return vec3_transformMat3; });\n__webpack_require__.d(vec3_namespaceObject, "transformQuat", function() { return transformQuat; });\n__webpack_require__.d(vec3_namespaceObject, "rotateX", function() { return vec3_rotateX; });\n__webpack_require__.d(vec3_namespaceObject, "rotateY", function() { return vec3_rotateY; });\n__webpack_require__.d(vec3_namespaceObject, "rotateZ", function() { return vec3_rotateZ; });\n__webpack_require__.d(vec3_namespaceObject, "angle", function() { return vec3_angle; });\n__webpack_require__.d(vec3_namespaceObject, "zero", function() { return vec3_zero; });\n__webpack_require__.d(vec3_namespaceObject, "str", function() { return vec3_str; });\n__webpack_require__.d(vec3_namespaceObject, "exactEquals", function() { return vec3_exactEquals; });\n__webpack_require__.d(vec3_namespaceObject, "equals", function() { return vec3_equals; });\n__webpack_require__.d(vec3_namespaceObject, "sub", function() { return vec3_sub; });\n__webpack_require__.d(vec3_namespaceObject, "mul", function() { return vec3_mul; });\n__webpack_require__.d(vec3_namespaceObject, "div", function() { return vec3_div; });\n__webpack_require__.d(vec3_namespaceObject, "dist", function() { return vec3_dist; });\n__webpack_require__.d(vec3_namespaceObject, "sqrDist", function() { return vec3_sqrDist; });\n__webpack_require__.d(vec3_namespaceObject, "len", function() { return vec3_len; });\n__webpack_require__.d(vec3_namespaceObject, "sqrLen", function() { return vec3_sqrLen; });\n__webpack_require__.d(vec3_namespaceObject, "forEach", function() { return vec3_forEach; });\n\n// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/common.js\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== \'undefined\' ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};\n// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat4.js\n\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nfunction create() {\n  var out = new ARRAY_TYPE(16);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nfunction clone(a) {\n  var out = new ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nfunction fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nfunction set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nfunction translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nfunction mat4_scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nfunction rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nfunction fromQuat2(out, a) {\n  var translation = new ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nfunction getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nfunction getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nfunction getRotation(out, mat) {\n  var scaling = new ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nfunction perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nfunction lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nfunction targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction str(a) {\n  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4\'s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix\'s elements by\r\n * @returns {mat4} out\r\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4\'s after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b\'s elements by before adding\r\n * @returns {mat4} out\r\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction mat4_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec2.js\n\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction vec2_create() {\n  var out = new ARRAY_TYPE(2);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction vec2_clone(a) {\n  var out = new ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction vec2_fromValues(x, y) {\n  var out = new ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2\'s after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2\'s\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2\'s\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction vec2_length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nfunction normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2\'s\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2\'s\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly \'1\'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly \'0\'\r\n * 4th vector component is implicitly \'1\'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nfunction angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction vec2_str(a) {\n  return "vec2(" + a[0] + ", " + a[1] + ")";\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction vec2_exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction vec2_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nvar vec2_len = vec2_length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nvar vec2_sub = vec2_subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nvar vec2_mul = vec2_multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nvar div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nvar dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach = function () {\n  var vec = vec2_create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();\n// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec3.js\n\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction vec3_create() {\n  var out = new ARRAY_TYPE(3);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction vec3_clone(a) {\n  var out = new ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction vec3_length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction vec3_fromValues(x, y, z) {\n  var out = new ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3\'s after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3\'s\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction vec3_distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3\'s\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction vec3_squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction vec3_squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3\'s\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction vec3_dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_random(out, scale) {\n  scale = scale || 1.0;\n  var r = RANDOM() * 2.0 * Math.PI;\n  var z = RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly \'1\'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nfunction vec3_angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && vec3_dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction vec3_str(a) {\n  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction vec3_exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction vec3_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nvar vec3_sub = vec3_subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nvar vec3_mul = vec3_multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nvar vec3_div = vec3_divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nvar vec3_dist = vec3_distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nvar vec3_sqrDist = vec3_squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nvar vec3_len = vec3_length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nvar vec3_sqrLen = vec3_squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar vec3_forEach = function () {\n  var vec = vec3_create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();\n// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/index.js\n\n\n\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./src/SVDAG.ts\n\r\nfunction bitCount(num) {\r\n    let n = num;\r\n    n = ((0xaa & n) >> 1) + (0x55 & n);\r\n    n = ((0xcc & n) >> 2) + (0x33 & n);\r\n    n = ((0xf0 & n) >> 4) + (0x0f & n);\r\n    return n;\r\n}\r\nconst dec2bin = (dec) => (dec >>> 0).toString(2);\r\nclass SVDAG_EncodedOctree {\r\n    constructor() {\r\n        this.bboxStart = vec3_namespaceObject.create();\r\n        this.bboxEnd = vec3_namespaceObject.create();\r\n        this.bboxCenter = vec3_namespaceObject.create();\r\n    }\r\n}\r\nclass SVDAG_SVDAG extends SVDAG_EncodedOctree {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.initialized = false;\r\n        this.dataLoadedOffset = 0;\r\n        this.renderPreferences = {};\r\n    }\r\n    load(buffer) {\r\n        let i = this.parseHeader(buffer);\r\n        this.nodes.set(new Uint32Array(buffer.slice(i)));\r\n    }\r\n    parseHeader(buffer) {\r\n        let i = 0;\r\n        this.bboxStart.set(new Float32Array(buffer.slice(i, i + 12)));\r\n        i += 12;\r\n        this.bboxEnd.set(new Float32Array(buffer.slice(i, i + 12)));\r\n        i += 12;\r\n        this.rootSide = new Float32Array(buffer.slice(i, i + 4))[0];\r\n        i += 4;\r\n        this.nLevels = new Uint32Array(buffer.slice(i, i + 4))[0];\r\n        i += 4;\r\n        this.nNodes = new Uint32Array(buffer.slice(i, i + 4))[0];\r\n        i += 4;\r\n        const firstLeafPointer = new Uint32Array(buffer.slice(i, i + 4))[0];\r\n        i += 4;\r\n        const nodeBufLength = new Uint32Array(buffer.slice(i, i + 4))[0];\r\n        this.originalNodeLength = nodeBufLength;\r\n        i += 4;\r\n        this.nodes = new Uint32Array(nodeBufLength);\r\n        vec3_namespaceObject.sub(this.bboxCenter, this.bboxEnd, this.bboxStart);\r\n        vec3_namespaceObject.scaleAndAdd(this.bboxCenter, this.bboxStart, this.bboxCenter, 0.5);\r\n        return i;\r\n    }\r\n    loadChunk(buffer) {\r\n        if (!this.initialized) {\r\n            const lastOffset = this.parseHeader(buffer.buffer);\r\n            this.initialized = true;\r\n            if ((buffer.length - lastOffset) / 4 !== this.nodes.length) {\r\n                this.nodes.fill(Math.pow(2, 31) - 1);\r\n            }\r\n            this.loadChunk(buffer.slice(lastOffset));\r\n        }\r\n        else {\r\n            this.nodes.set(new Uint32Array(buffer.buffer), this.dataLoadedOffset / 4);\r\n            this.dataLoadedOffset += buffer.length;\r\n        }\r\n    }\r\n    castRay(o, d, maxIters = 100) {\r\n        const stepSize = this.rootSide / Math.pow(2, this.nLevels - 1);\r\n        const p = vec3_namespaceObject.copy(vec3_namespaceObject.create(), o);\r\n        for (let i = 0; i < maxIters; i++) {\r\n            vec3_namespaceObject.scaleAndAdd(p, p, d, stepSize);\r\n            const node = this.getVoxel(p);\r\n            if (node) {\r\n                return { ...node, maxRayLength: stepSize * maxIters };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    getVoxel(pos) {\r\n        const nodeCenter = vec3_namespaceObject.create();\r\n        nodeCenter.set(this.bboxCenter);\r\n        let nodeIndex = 0;\r\n        let hs = this.rootSide / 2;\r\n        for (let lev = 0; lev < this.nLevels; lev++) {\r\n            const childIndex = (pos[0] > nodeCenter[0] ? 4 : 0)\r\n                + (pos[1] > nodeCenter[1] ? 2 : 0)\r\n                + (pos[2] > nodeCenter[2] ? 1 : 0);\r\n            const header = this.nodes[nodeIndex];\r\n            const hasChild = (header & (1 << childIndex)) !== 0;\r\n            if (!hasChild) {\r\n                return null;\r\n            }\r\n            else if (lev === this.nLevels - 1) {\r\n                return { nodeIndex, hitPos: nodeCenter };\r\n            }\r\n            hs /= 2;\r\n            nodeCenter[0] += (pos[0] > nodeCenter[0]) ? hs : -hs;\r\n            nodeCenter[1] += (pos[1] > nodeCenter[1]) ? hs : -hs;\r\n            nodeCenter[2] += (pos[2] > nodeCenter[2]) ? hs : -hs;\r\n            const childPtrOffset = bitCount(header >> childIndex);\r\n            nodeIndex = this.nodes[nodeIndex + childPtrOffset];\r\n        }\r\n        return null;\r\n    }\r\n}\r\nclass ESVDAG extends SVDAG_EncodedOctree {\r\n    load(buffer) {\r\n        console.log(`Loading SVDAG (${buffer.byteLength} bytes)`);\r\n        let i = 0;\r\n        this.bboxStart.set(new Float32Array(buffer.slice(i, i + 12)));\r\n        i += 12;\r\n        this.bboxEnd.set(new Float32Array(buffer.slice(i, i + 12)));\r\n        i += 12;\r\n        const rootSide = new Float32Array(buffer.slice(i, i + 4))[0];\r\n        i += 4;\r\n        this.nLevels = new Uint32Array(buffer.slice(i, i + 4))[0];\r\n        i += 4;\r\n        const nNodes = new Uint32Array(buffer.slice(i, i + 4))[0];\r\n        i += 4;\r\n        const nInnerNodes = new Uint32Array(buffer.slice(i, i + 4))[0];\r\n        i += 4;\r\n        this.innerNodes = new Uint16Array(buffer.slice(i, i + 2 * nInnerNodes));\r\n        i += 2 * nInnerNodes;\r\n        const nLeafNodes = new Uint32Array(buffer.slice(i, i + 4))[0];\r\n        i += 4;\r\n        this.leafNodes = new BigUint64Array(buffer.slice(i, i + 8 * nLeafNodes));\r\n        i += 8 * nLeafNodes;\r\n        const nLevelOffsets = new Uint32Array(buffer.slice(i, i + 4))[0];\r\n        i += 4;\r\n        this.levelOffsets = new Uint32Array(buffer.slice(i, i + nLevelOffsets * 4));\r\n        i += nLevelOffsets * 4;\r\n        console.log(\'OK!\');\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/Camera.ts\n\r\nclass Camera_Camera {\r\n    constructor() {\r\n        this.position = vec3_namespaceObject.create();\r\n        this.target = vec3_namespaceObject.create();\r\n        this.upDir = vec3_namespaceObject.create();\r\n        this.viewMat = mat4_namespaceObject.create();\r\n        this.viewMatInv = mat4_namespaceObject.create();\r\n        this.projMat = mat4_namespaceObject.create();\r\n        this.projMatInv = mat4_namespaceObject.create();\r\n        this.fovY = 60.0 * 3.14159265359 / 180.0;\r\n        vec3_namespaceObject.set(this.upDir, 0, 1, 0);\r\n    }\r\n    updateMatrices() {\r\n        mat4_namespaceObject.lookAt(this.viewMat, this.position, this.target, this.upDir);\r\n        mat4_namespaceObject.perspective(this.projMat, this.fovY, window.innerWidth / window.innerHeight, 0.1, 1);\r\n        mat4_namespaceObject.invert(this.projMatInv, this.projMat);\r\n        mat4_namespaceObject.invert(this.viewMatInv, this.viewMat);\r\n    }\r\n    updatePosition() {\r\n        const forward = vec3_namespaceObject.subtract(vec3_namespaceObject.create(), this.position, this.target);\r\n        console.log(forward);\r\n        vec3_namespaceObject.transformMat4(this.position, forward, this.viewMat);\r\n        vec3_namespaceObject.add(this.position, this.position, this.target);\r\n    }\r\n}\r\n/* harmony default export */ var src_Camera = (Camera_Camera);\r\n\n// CONCATENATED MODULE: ./src/OrbitController.ts\n\r\nclass OrbitController_OrbitController {\r\n    constructor(camera, moveSpeed) {\r\n        this.camera = camera;\r\n        this.moveSpeed = moveSpeed;\r\n        this.prevMousePos = vec2_namespaceObject.create();\r\n        this.mousePos = vec2_namespaceObject.create();\r\n        this.tmpDir = vec3_namespaceObject.create();\r\n        this.keyDownStatus = {};\r\n        this.radius = vec3_namespaceObject.dist(this.camera.position, this.camera.target);\r\n        vec3_namespaceObject.normalize(this.tmpDir, vec3_namespaceObject.sub(this.tmpDir, this.camera.target, this.camera.position));\r\n    }\r\n    init() {\r\n        this.radius = vec3_namespaceObject.dist(this.camera.position, this.camera.target);\r\n        vec3_namespaceObject.normalize(this.tmpDir, vec3_namespaceObject.sub(this.tmpDir, this.camera.target, this.camera.position));\r\n    }\r\n    update(dt) {\r\n        let updated = false;\r\n        if (this.keyDownStatus[\'shift\']) {\r\n            dt *= 10;\r\n        }\r\n        const tmpKeyDir = vec3_namespaceObject.create();\r\n        if (this.keyDownStatus[\'w\'] || this.numTouches === 2) {\r\n            updated = true;\r\n            vec3_namespaceObject.normalize(tmpKeyDir, vec3_namespaceObject.sub(tmpKeyDir, this.camera.target, this.camera.position));\r\n            this.moveInDirection(tmpKeyDir, this.moveSpeed * dt);\r\n        }\r\n        if (this.keyDownStatus[\'s\']) {\r\n            updated = true;\r\n            vec3_namespaceObject.normalize(tmpKeyDir, vec3_namespaceObject.sub(tmpKeyDir, this.camera.target, this.camera.position));\r\n            this.moveInDirection(tmpKeyDir, -this.moveSpeed * dt);\r\n        }\r\n        if (this.keyDownStatus[\'a\']) {\r\n            updated = true;\r\n            vec3_namespaceObject.cross(tmpKeyDir, vec3_namespaceObject.normalize(tmpKeyDir, vec3_namespaceObject.sub(tmpKeyDir, this.camera.position, this.camera.target)), this.camera.upDir);\r\n            this.moveInDirection(tmpKeyDir, this.moveSpeed * dt);\r\n        }\r\n        if (this.keyDownStatus[\'d\']) {\r\n            updated = true;\r\n            vec3_namespaceObject.cross(tmpKeyDir, vec3_namespaceObject.normalize(tmpKeyDir, vec3_namespaceObject.sub(tmpKeyDir, this.camera.position, this.camera.target)), this.camera.upDir);\r\n            this.moveInDirection(tmpKeyDir, -this.moveSpeed * dt);\r\n        }\r\n        if (this.keyDownStatus[\'q\']) {\r\n            updated = true;\r\n            vec3_namespaceObject.normalize(tmpKeyDir, vec3_namespaceObject.sub(tmpKeyDir, this.camera.target, this.camera.position));\r\n            this.rotateAlongLocalY(0.5, dt);\r\n        }\r\n        if (this.keyDownStatus[\'e\']) {\r\n            updated = true;\r\n            vec3_namespaceObject.normalize(tmpKeyDir, vec3_namespaceObject.sub(tmpKeyDir, this.camera.target, this.camera.position));\r\n            this.rotateAlongLocalY(0.5, -dt);\r\n        }\r\n        if (this.keyDownStatus[\'mouse-0\']) {\r\n            updated = true;\r\n            const delta = vec2_namespaceObject.subtract(vec2_namespaceObject.create(), this.prevMousePos, this.mousePos);\r\n            vec2_namespaceObject.divide(delta, delta, [document.documentElement.clientWidth, document.documentElement.clientHeight]);\r\n            const lookSpeed = 5;\r\n            this.rotateAlongLocalY(delta[0], lookSpeed);\r\n            this.rotateAlongLocalX(delta[1], -lookSpeed);\r\n        }\r\n        if (updated) {\r\n            this.camera.updateMatrices();\r\n        }\r\n        this.prevMousePos.set(this.mousePos);\r\n    }\r\n    moveInDirection(dir, speed) {\r\n        vec3_namespaceObject.scaleAndAdd(this.camera.position, this.camera.position, dir, speed);\r\n        vec3_namespaceObject.scaleAndAdd(this.camera.target, this.camera.target, dir, speed);\r\n    }\r\n    rotateAlongLocalY(amount, speed) {\r\n        const mat = mat4_namespaceObject.rotate(mat4_namespaceObject.create(), mat4_namespaceObject.identity(mat4_namespaceObject.create()), amount * speed, this.camera.upDir);\r\n        vec3_namespaceObject.transformMat4(this.tmpDir, this.tmpDir, mat);\r\n        vec3_namespaceObject.scaleAndAdd(this.camera.target, this.camera.position, this.tmpDir, this.radius);\r\n    }\r\n    rotateAlongLocalX(amount, speed) {\r\n        const forward = vec3_namespaceObject.subtract(vec3_namespaceObject.create(), this.camera.target, this.camera.position);\r\n        vec3_namespaceObject.normalize(forward, forward);\r\n        const localX = vec3_namespaceObject.create();\r\n        vec3_namespaceObject.cross(localX, this.camera.upDir, forward);\r\n        const mat = mat4_namespaceObject.create();\r\n        mat4_namespaceObject.rotate(mat, mat4_namespaceObject.identity(mat), amount * speed, localX);\r\n        vec3_namespaceObject.transformMat4(this.tmpDir, this.tmpDir, mat);\r\n        vec3_namespaceObject.scaleAndAdd(this.camera.target, this.camera.position, this.tmpDir, this.radius);\r\n    }\r\n    rotateAroundPivot(dir) {\r\n    }\r\n    onKeyDown(e) {\r\n        this.keyDownStatus[e.key.toLocaleLowerCase()] = true;\r\n    }\r\n    onKeyUp(e) {\r\n        this.keyDownStatus[e.key.toLocaleLowerCase()] = false;\r\n    }\r\n    onMouseDown(e) {\r\n        this.keyDownStatus[`mouse-${e.button}`] = true;\r\n        this.prevMousePos.set([e.clientX, e.clientY]);\r\n        this.mousePos.set(this.prevMousePos);\r\n    }\r\n    onTouchStart(e) {\r\n        this.keyDownStatus[`mouse-0`] = true;\r\n        this.prevMousePos.set([e.touches[0].clientX, e.touches[0].clientY]);\r\n        this.mousePos.set(this.prevMousePos);\r\n        this.numTouches = e.touches.length;\r\n    }\r\n    onMouseUp(e) {\r\n        this.keyDownStatus[`mouse-${e.button}`] = false;\r\n    }\r\n    onTouchEnd(e) {\r\n        this.keyDownStatus[`mouse-0`] = false;\r\n        this.numTouches = 0;\r\n    }\r\n    onMouseMove(e) {\r\n        this.mousePos.set(vec2_namespaceObject.fromValues(e.clientX, e.clientY));\r\n    }\r\n    onTouchMove(e) {\r\n        this.mousePos.set(vec2_namespaceObject.fromValues(e.touches[0].clientX, e.touches[0].clientY));\r\n        this.numTouches = e.touches.length;\r\n    }\r\n    onMouseWheel(e) {\r\n        window.setMoveSpeed(this.moveSpeed *= e.deltaY < 0 ? 1.1 : 0.9);\r\n    }\r\n}\r\n/* harmony default export */ var src_OrbitController = (OrbitController_OrbitController);\r\n\n// CONCATENATED MODULE: ./src/SceneProvider.ts\n\r\n\r\nclass SceneProvider_SceneProvider {\r\n    static async getGeneratedSceneList() {\r\n        const generatedSceneOptions = [\r\n            {\r\n                label: \'Cube fractal\',\r\n                getScene: async (svdag) => SceneProvider_SceneProvider.generateCubeFractal(svdag),\r\n                loadType: \'preloaded\',\r\n            },\r\n            {\r\n                label: \'Pyramid fractal\',\r\n                getScene: async (svdag) => SceneProvider_SceneProvider.generatePyramidFractal(svdag),\r\n                loadType: \'preloaded\',\r\n            },\r\n        ];\r\n        return generatedSceneOptions;\r\n    }\r\n    static async getPrebuiltSceneList() {\r\n        try {\r\n            const prebuiltScenes = await SceneProvider_SceneProvider.fetchPrebuiltScenes();\r\n            return prebuiltScenes.map(f => ({\r\n                label: `${f.fileName} (${f.size})`,\r\n                downloadPath: f.absolutePath,\r\n                loadType: \'stream\',\r\n            }));\r\n        }\r\n        catch (e) {\r\n            console.error(\'Could not fetch prebuilt scenes :(\', e);\r\n            return [];\r\n        }\r\n    }\r\n    static async fetchPrebuiltScenes() {\r\n        const hostUrl = `https://allaboutsteinsgate.info/dev/dagger/scenes/`;\r\n        const res = await fetch(`${hostUrl}?C=N;O=A`);\r\n        const pageString = await res.text();\r\n        const doc = new DOMParser().parseFromString(pageString, \'text/html\');\r\n        return Array.from(doc.querySelectorAll(\'tr\'))\r\n            .slice(3, -1)\r\n            .map((row) => ({\r\n            fileName: row.childNodes[1].innerText.trim().replace(\'.svdag\', \'\'),\r\n            absolutePath: `${hostUrl}${row.querySelector(\'a\').href.split(\'/\').pop()}`,\r\n            size: row.childNodes[3].innerText,\r\n        }));\r\n    }\r\n    static generateBaseFractal(svdag, nNodes, nodeData) {\r\n        svdag.bboxStart.set([0, 0, 0]);\r\n        svdag.bboxEnd.set([100, 100, 100]);\r\n        vec3_namespaceObject.sub(svdag.bboxCenter, svdag.bboxEnd, svdag.bboxStart);\r\n        vec3_namespaceObject.scaleAndAdd(svdag.bboxCenter, svdag.bboxStart, svdag.bboxCenter, 0.5);\r\n        svdag.rootSide = 100;\r\n        svdag.nLevels = 20;\r\n        svdag.nNodes = nNodes;\r\n        svdag.nodes = nodeData;\r\n        return svdag;\r\n    }\r\n    static generatePyramidFractal(svdag) {\r\n        svdag.renderPreferences = {\r\n            renderMode: RenderMode.ITERATIONS,\r\n            maxIterations: 100,\r\n            spawnPosition: vec3_namespaceObject.fromValues(125, 125, 125),\r\n        };\r\n        return SceneProvider_SceneProvider.generateBaseFractal(svdag, 1, new Uint32Array([\r\n            0b11101000,\r\n            0, 0, 0, 0,\r\n        ]));\r\n    }\r\n    static generateCubeFractal(svdag) {\r\n        svdag.renderPreferences = {\r\n            renderMode: RenderMode.DIFFUSE_LIGHTING,\r\n            maxIterations: 30,\r\n            spawnPosition: vec3_namespaceObject.fromValues(150, 150, 150),\r\n        };\r\n        return SceneProvider_SceneProvider.generateBaseFractal(svdag, 2, new Uint32Array([\r\n            0b11111111,\r\n            9, 9, 9, 9, 9, 9, 9, 9,\r\n            0b01111111,\r\n            0, 0, 0, 0, 0, 0, 0\r\n        ]));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/main.ts\n\r\n\r\n\r\n\r\n\r\nvar RenderMode;\r\n(function (RenderMode) {\r\n    RenderMode[RenderMode["ITERATIONS"] = 0] = "ITERATIONS";\r\n    RenderMode[RenderMode["DEPTH"] = 1] = "DEPTH";\r\n    RenderMode[RenderMode["DIFFUSE_LIGHTING"] = 2] = "DIFFUSE_LIGHTING";\r\n    RenderMode[RenderMode["PATH_TRACING"] = 3] = "PATH_TRACING";\r\n})(RenderMode || (RenderMode = {}));\r\nconst defaultState = {\r\n    startTime: new Date().getTime() / 1000,\r\n    time: 0,\r\n    frame: 0,\r\n    pixelTolerance: 1,\r\n    renderScale: 1,\r\n    drawLevel: 1,\r\n    maxIterations: 250,\r\n    moveSpeed: 1,\r\n    renderMode: RenderMode.ITERATIONS,\r\n    showUniqueNodeColors: false,\r\n};\r\nconst MAX_DRAW_LEVEL = 20;\r\nconst state = { ...defaultState };\r\nlet canvas;\r\nlet gl;\r\nlet program;\r\nlet fragShader;\r\nlet texture;\r\nlet controller;\r\nlet scene;\r\nlet maxT3DTexels;\r\nconst sceneList = [];\r\nconst main_camera = new src_Camera();\r\nconst rerender = () => requestAnimationFrame(render);\r\nfunction setRenderScale(num) {\r\n    state.renderScale = num;\r\n    canvas.width = window.innerWidth * state.renderScale;\r\n    canvas.height = window.innerHeight * state.renderScale;\r\n    canvas.style.transform = `translate(-50%, -50%) scale(${1 / state.renderScale})`;\r\n    document.getElementById(\'renderScale\').value = `${state.renderScale}`;\r\n}\r\nwindow.setRenderScale = setRenderScale.bind(undefined);\r\nfunction setDrawLevel(num) {\r\n    state.drawLevel = Math.max(1, Math.min(num, MAX_DRAW_LEVEL));\r\n    document.getElementById(\'drawLevel\').value = `${state.drawLevel}`;\r\n}\r\nwindow.setDrawLevel = setDrawLevel.bind(undefined);\r\nfunction setRenderMode(num) {\r\n    console.log(\'setting render mode\', num);\r\n    state.renderMode = num;\r\n    document.getElementById(\'renderMode\').value = `${state.renderMode}`;\r\n}\r\nwindow.setRenderMode = setRenderMode.bind(undefined);\r\nfunction setMoveSpeed(num) {\r\n    state.moveSpeed = typeof num === \'number\' ? num : parseFloat(num);\r\n    document.getElementById(\'moveSpeed\').value = state.moveSpeed.toFixed(1);\r\n    controller.moveSpeed = state.moveSpeed;\r\n}\r\nwindow.setMoveSpeed = setMoveSpeed.bind(undefined);\r\nfunction setMaxIterations(num) {\r\n    state.maxIterations = Math.max(1, Math.min(num, 1000));\r\n    document.getElementById(\'maxIterations\').value = state.maxIterations.toFixed(0);\r\n}\r\nwindow.setMaxIterations = setMaxIterations.bind(undefined);\r\nfunction setPixelTolerance(num) {\r\n    state.pixelTolerance = typeof num === \'number\' ? num : parseFloat(num);\r\n    document.getElementById(\'pixelTolerance\').value = state.pixelTolerance.toFixed(2);\r\n}\r\nwindow.setPixelTolerance = setPixelTolerance.bind(undefined);\r\nfunction setShowUniqueColors(val) {\r\n    state.showUniqueNodeColors = val;\r\n    console.log(val);\r\n}\r\nwindow.setShowUniqueColors = setShowUniqueColors.bind(undefined);\r\nasync function loadSelectedScene() {\r\n    const selector = document.getElementById(\'sceneSelector\');\r\n    const selectedSceneIndex = parseInt(selector.options[selector.selectedIndex].value);\r\n    if (texture !== undefined) {\r\n        gl.deleteTexture(texture);\r\n    }\r\n    const oldBboxCenter = (scene === null || scene === void 0 ? void 0 : scene.bboxCenter) || vec3_namespaceObject.create();\r\n    texture = await createTexture(gl);\r\n    scene = await loadScene(sceneList[selectedSceneIndex]);\r\n    setDrawLevel(scene.nLevels);\r\n    if (vec3_namespaceObject.dist(oldBboxCenter, scene.bboxCenter) > 0.001 || scene.renderPreferences.spawnPosition) {\r\n        if (!scene.renderPreferences.spawnPosition) {\r\n            main_camera.position.set(scene.bboxEnd);\r\n        }\r\n        main_camera.target.set(scene.bboxCenter);\r\n        setMoveSpeed(vec3_namespaceObject.distance(scene.bboxStart, scene.bboxEnd) * 0.01);\r\n    }\r\n    main_camera.updateMatrices();\r\n    controller.init();\r\n    if (program !== undefined) {\r\n        setInitialUniforms();\r\n    }\r\n}\r\nwindow.loadSelectedScene = loadSelectedScene.bind(undefined);\r\nasync function init() {\r\n    canvas = document.querySelector("#glCanvas");\r\n    gl = canvas.getContext("webgl2");\r\n    setRenderScale(state.renderScale);\r\n    if (gl === null) {\r\n        alert("Unable to initialize WebGL. Your browser or machine may not support it.");\r\n        return;\r\n    }\r\n    console.log(gl.getParameter(gl.VERSION), gl.getParameter(gl.SHADING_LANGUAGE_VERSION), gl.getParameter(gl.VENDOR));\r\n    maxT3DTexels = gl.getParameter(gl.MAX_3D_TEXTURE_SIZE);\r\n    const maxNodes = Math.floor(Math.pow(maxT3DTexels, 3) / 5);\r\n    console.log(`Max 3D tex = ${maxT3DTexels}. Max avg. nodes ~= ${maxNodes} = ${Math.round(maxNodes / 1e6)} MNodes`);\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    sceneList.push(...(await SceneProvider_SceneProvider.getGeneratedSceneList()));\r\n    const sceneSelector = document.querySelector(\'#sceneSelector\');\r\n    const addSceneToUI = (item, index) => {\r\n        const opt = document.createElement(\'option\');\r\n        opt.value = `${index}`;\r\n        opt.innerText = item.label;\r\n        sceneSelector.appendChild(opt);\r\n    };\r\n    sceneList.forEach(addSceneToUI);\r\n    SceneProvider_SceneProvider.getPrebuiltSceneList().then(scenes => {\r\n        sceneList.push(...scenes);\r\n        sceneSelector.innerHTML = \'\';\r\n        sceneList.forEach(addSceneToUI);\r\n    });\r\n    controller = new src_OrbitController(main_camera, 1);\r\n    await loadSelectedScene();\r\n    controller.init();\r\n    [program, fragShader] = await loadProgram(gl, scene.nLevels);\r\n    setInitialUniforms();\r\n    gl.enable(gl.DEPTH_TEST);\r\n    canvas.tabIndex = 0;\r\n    canvas.addEventListener(\'keydown\', controller.onKeyDown.bind(controller));\r\n    canvas.addEventListener(\'keyup\', controller.onKeyUp.bind(controller));\r\n    canvas.addEventListener(\'mousedown\', controller.onMouseDown.bind(controller));\r\n    canvas.addEventListener(\'mouseup\', controller.onMouseUp.bind(controller));\r\n    canvas.addEventListener(\'mousemove\', controller.onMouseMove.bind(controller));\r\n    canvas.addEventListener(\'wheel\', controller.onMouseWheel.bind(controller));\r\n    canvas.oncontextmenu = () => false;\r\n    canvas.addEventListener(\'touchstart\', controller.onTouchStart.bind(controller));\r\n    canvas.addEventListener(\'touchend\', controller.onTouchEnd.bind(controller));\r\n    canvas.addEventListener(\'touchmove\', controller.onTouchMove.bind(controller));\r\n    canvas.addEventListener(\'keydown\', (e) => {\r\n        if (e.key === \'1\') {\r\n            setDrawLevel(state.drawLevel - 1);\r\n        }\r\n        else if (e.key === \'2\') {\r\n            setDrawLevel(state.drawLevel + 1);\r\n        }\r\n    });\r\n    setTimeout(() => {\r\n        if (latestFps < 15) {\r\n            setRenderScale(0.25);\r\n        }\r\n        else if (latestFps < 30) {\r\n            setRenderScale(0.5);\r\n        }\r\n        else if (latestFps < 45) {\r\n            setRenderScale(0.75);\r\n        }\r\n    }, 2500);\r\n    rerender();\r\n}\r\nfunction loadVertShader(gl) {\r\n    const vertSrc = `#version 300 es\r\n    uniform float time;\r\n    void main(void) {\r\n      vec2 outUV = vec2((gl_VertexID << 1) & 2, gl_VertexID & 2);\r\n      outUV = outUV * 2.0f - 1.0f;\r\n      // gl_Position = vec4(outUV * (1.0 / time) + vec2(cos(time * time), sin(time * time)), 0.0f, 1.0f);\r\n      gl_Position = vec4(outUV, 0.0f, 1.0f);\r\n    }\r\n  `;\r\n    const vertShader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vertShader, vertSrc);\r\n    gl.compileShader(vertShader);\r\n    console.log(\'Vert shader: \', gl.getShaderInfoLog(vertShader) || \'OK\');\r\n    return vertShader;\r\n}\r\nasync function loadFragShader(gl, nLevels) {\r\n    const maxT3DTexels = gl.getParameter(gl.MAX_3D_TEXTURE_SIZE);\r\n    const maxT3DTexelsPow2 = maxT3DTexels * maxT3DTexels;\r\n    const shaderSrcRes = await fetch(\'raycast.glsl\');\r\n    let shaderSrc = await shaderSrcRes.text();\r\n    const defines = `#version 300 es\r\n#define INNER_LEVELS ${nLevels * 2 - 1}u\r\n#define TEX3D_SIZE ${maxT3DTexels}\r\n#define TEX3D_SIZE_POW2 ${maxT3DTexelsPow2}\r\n`;\r\n    shaderSrc = defines + \'\\n\' + shaderSrc.split(\'\\n\').splice(defines.split(\'\\n\').length).join(\'\\n\');\r\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(shader, shaderSrc);\r\n    gl.compileShader(shader);\r\n    console.log(\'Raycast shader: \', gl.getShaderInfoLog(shader) || \'OK\');\r\n    return shader;\r\n}\r\nasync function loadProgram(gl, nLevels) {\r\n    const vertShader = loadVertShader(gl);\r\n    const fragShader = await loadFragShader(gl, nLevels);\r\n    program = gl.createProgram();\r\n    gl.attachShader(program, vertShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        throw \'Could not compile WebGL program. \\n\\n\' + gl.getProgramInfoLog(program);\r\n    }\r\n    gl.useProgram(program);\r\n    return [program, fragShader];\r\n}\r\nasync function loadScene(sceneOption) {\r\n    console.log(`Loading "${sceneOption.label}" (${sceneOption.loadType})...`);\r\n    let svdag;\r\n    if (sceneOption.loadType === \'stream\') {\r\n        svdag = await loadSceneStream(sceneOption.downloadPath);\r\n    }\r\n    else if (sceneOption.loadType === \'fetch\') {\r\n        svdag = new SVDAG_SVDAG();\r\n        const response = await fetch(sceneOption.downloadPath);\r\n        svdag.load(await response.arrayBuffer());\r\n        svdag.dataLoadedOffset = svdag.nNodes * 4;\r\n        uploadTexData(svdag, svdag.nNodes);\r\n        svdag.renderPreferences.maxIterations = defaultState.maxIterations;\r\n    }\r\n    else if (sceneOption.loadType === \'preloaded\') {\r\n        svdag = new SVDAG_SVDAG();\r\n        sceneOption.getScene(svdag);\r\n        svdag.originalNodeLength = svdag.nodes.length;\r\n        svdag.dataLoadedOffset = svdag.nNodes * 4;\r\n        svdag.initialized = true;\r\n        uploadTexData(svdag, svdag.nNodes);\r\n        svdag.renderPreferences.maxIterations = defaultState.maxIterations;\r\n    }\r\n    if (svdag.renderPreferences.renderMode !== undefined)\r\n        setRenderMode(svdag.renderPreferences.renderMode);\r\n    if (svdag.renderPreferences.maxIterations)\r\n        setMaxIterations(svdag.renderPreferences.maxIterations);\r\n    if (svdag.renderPreferences.moveSpeed)\r\n        setMoveSpeed(svdag.renderPreferences.moveSpeed);\r\n    if (svdag.renderPreferences.spawnPosition)\r\n        main_camera.position = svdag.renderPreferences.spawnPosition;\r\n    console.log(\'Loaded!\');\r\n    console.log(`Levels: ${svdag.nLevels}, nodes: ${svdag.nNodes}`);\r\n    console.log(`Bbox:\\n\\t[${svdag.bboxStart}]\\n\\t[${svdag.bboxEnd}]\\n\\t(center: [${svdag.bboxCenter}])`);\r\n    return svdag;\r\n}\r\nasync function loadSceneStream(downloadPath) {\r\n    console.log(\'Streaming\', downloadPath, \'...\');\r\n    const response = await fetch(downloadPath);\r\n    const reader = response.body.getReader();\r\n    const { done, value } = await reader.read();\r\n    const svdag = new SVDAG_SVDAG();\r\n    svdag.loadChunk(value);\r\n    uploadTexData(svdag, svdag.dataLoadedOffset / 4);\r\n    let progressPct = Math.round((svdag.dataLoadedOffset / 4) / svdag.originalNodeLength * 100);\r\n    const loadButton = document.getElementById(\'load\');\r\n    loadButton.disabled = true;\r\n    loadButton.innerText = `Load (${progressPct}%)`;\r\n    const loadNodesPromise = async () => {\r\n        let lastUpload = new Date();\r\n        let lastUploadIndex = svdag.dataLoadedOffset;\r\n        while (true) {\r\n            const { done, value } = await reader.read();\r\n            if (done) {\r\n                break;\r\n            }\r\n            console.log(`Received ${value.byteLength} bytes (${value.length / 1000000} MB)`);\r\n            svdag.loadChunk(value);\r\n            progressPct = Math.round((svdag.dataLoadedOffset / 4) / svdag.originalNodeLength * 100);\r\n            loadButton.innerText = `Load (${progressPct}%)`;\r\n            const d = new Date();\r\n            if (d.getTime() - lastUpload.getTime() > 1000) {\r\n                uploadTexData(svdag, (svdag.dataLoadedOffset - lastUploadIndex) / 4);\r\n                lastUploadIndex = svdag.dataLoadedOffset;\r\n                lastUpload = d;\r\n            }\r\n        }\r\n        uploadTexData(svdag, (svdag.dataLoadedOffset - lastUploadIndex) / 4);\r\n        return;\r\n    };\r\n    const finish = () => {\r\n        console.log(\'Finished loading!\');\r\n        loadButton.innerText = \'Load\';\r\n        loadButton.disabled = false;\r\n    };\r\n    if (done || progressPct >= 99) {\r\n        finish();\r\n    }\r\n    else {\r\n        loadNodesPromise().then(finish);\r\n    }\r\n    return svdag;\r\n}\r\nfunction getProjectionFactor(pixelTolerance, screenDivisor) {\r\n    const inv_2tan_half_fovy = 1.0 / (2.0 * Math.tan(0.5 * main_camera.fovY));\r\n    const screen_tolerance = pixelTolerance / (canvas.height / screenDivisor);\r\n    return inv_2tan_half_fovy / screen_tolerance;\r\n}\r\nasync function setInitialUniforms() {\r\n    const uResolutionLoc = gl.getUniformLocation(program, \'resolution\');\r\n    gl.uniform2f(uResolutionLoc, canvas.width, canvas.height);\r\n    const uNodes = gl.getUniformLocation(program, \'nodes\');\r\n    gl.uniform1i(uNodes, 0);\r\n    const uSceneBBoxMin = gl.getUniformLocation(program, \'sceneBBoxMin\');\r\n    gl.uniform3fv(uSceneBBoxMin, scene.bboxStart);\r\n    const uSceneBBoxMax = gl.getUniformLocation(program, \'sceneBBoxMax\');\r\n    gl.uniform3fv(uSceneBBoxMax, scene.bboxEnd);\r\n    const uSceneCenter = gl.getUniformLocation(program, \'sceneCenter\');\r\n    gl.uniform3fv(uSceneCenter, scene.bboxCenter);\r\n    const uRootHalfSide = gl.getUniformLocation(program, \'rootHalfSide\');\r\n    gl.uniform1f(uRootHalfSide, scene.rootSide / 2.0);\r\n    const uLightPos = gl.getUniformLocation(program, \'lightPos\');\r\n    gl.uniform3fv(uLightPos, scene.bboxEnd);\r\n    const uMaxIters = gl.getUniformLocation(program, \'maxIters\');\r\n    gl.uniform1ui(uMaxIters, state.maxIterations);\r\n    const uDrawLevel = gl.getUniformLocation(program, \'drawLevel\');\r\n    gl.uniform1ui(uDrawLevel, state.drawLevel);\r\n    const uProjectionFactor = gl.getUniformLocation(program, \'projectionFactor\');\r\n    gl.uniform1f(uProjectionFactor, getProjectionFactor(state.pixelTolerance, 1));\r\n    const uUniqueColors = gl.getUniformLocation(program, \'uniqueColors\');\r\n    gl.uniform1i(uUniqueColors, state.showUniqueNodeColors ? 1 : 0);\r\n    const uRenderMode = gl.getUniformLocation(program, \'viewerRenderMode\');\r\n    gl.uniform1i(uRenderMode, state.renderMode);\r\n    const uViewMatInv = gl.getUniformLocation(program, \'viewMatInv\');\r\n    gl.uniformMatrix4fv(uViewMatInv, false, main_camera.viewMatInv);\r\n    const uProjMatInv = gl.getUniformLocation(program, \'projMatInv\');\r\n    gl.uniformMatrix4fv(uProjMatInv, false, main_camera.projMatInv);\r\n}\r\nasync function createTexture(gl) {\r\n    const texture = gl.createTexture();\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_3D, texture);\r\n    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.REPEAT);\r\n    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.REPEAT);\r\n    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.REPEAT);\r\n    return texture;\r\n}\r\nasync function uploadTexData(svdag, nNewNodes) {\r\n    const maxT3DTexelsPow2 = maxT3DTexels * maxT3DTexels;\r\n    const neededTexels = svdag.nodes.length;\r\n    const depthLayers = Math.ceil(neededTexels / maxT3DTexelsPow2);\r\n    const nTexelsToAllocate = maxT3DTexelsPow2 * depthLayers;\r\n    const chunkStart = svdag.dataLoadedOffset / 4 - nNewNodes;\r\n    console.log(chunkStart, svdag.dataLoadedOffset / 4, nNewNodes);\r\n    if (chunkStart === 0) {\r\n        console.log(`Initial uploading of nodes to 3D texture (Resolution: ${maxT3DTexels} x ${maxT3DTexels} x ${depthLayers}, nNodes: ${svdag.dataLoadedOffset}/${svdag.nodes.length})...`);\r\n        if (svdag.nodes.length != nTexelsToAllocate) {\r\n            console.log(\'Resizing node buffer from \', svdag.nodes.length, \'to\', nTexelsToAllocate, \'(3D Texture padding)\');\r\n            const paddedNodes = new Uint32Array(nTexelsToAllocate);\r\n            paddedNodes.set(svdag.nodes);\r\n            svdag.nodes = paddedNodes;\r\n        }\r\n        gl.texStorage3D(gl.TEXTURE_3D, 1, gl.R32UI, maxT3DTexels, maxT3DTexels, depthLayers);\r\n        gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, maxT3DTexels, maxT3DTexels, depthLayers, gl.RED_INTEGER, gl.UNSIGNED_INT, svdag.nodes);\r\n    }\r\n    else {\r\n        const xOffset = 0;\r\n        const yOffset = 0;\r\n        const zOffset = Math.floor(chunkStart / maxT3DTexelsPow2);\r\n        const chunkStartZ = zOffset;\r\n        const chunkEndZ = Math.floor((svdag.dataLoadedOffset / 4) / maxT3DTexelsPow2);\r\n        const updateWidth = maxT3DTexels;\r\n        const updateHeight = maxT3DTexels;\r\n        const updateDepth = (chunkEndZ - chunkStartZ) + 1;\r\n        const newNodes = svdag.nodes.slice(yOffset * maxT3DTexels + chunkStartZ * maxT3DTexelsPow2, maxT3DTexels + updateHeight * maxT3DTexels + chunkEndZ * maxT3DTexelsPow2);\r\n        const progressPct = Math.round((svdag.dataLoadedOffset / 4) / svdag.originalNodeLength * 100);\r\n        console.log(`Uploading data to 3D texture (${svdag.dataLoadedOffset / 4}/${svdag.originalNodeLength} [${progressPct}%])...`);\r\n        console.log(\'#layers\', depthLayers, \'start\', zOffset, \'chunkStart\', chunkStart, \'newNodes\', nNewNodes, \'end\', chunkEndZ, \'depth\', updateDepth);\r\n        gl.texSubImage3D(gl.TEXTURE_3D, 0, xOffset, yOffset, zOffset, updateWidth, updateHeight, updateDepth, gl.RED_INTEGER, gl.UNSIGNED_INT, newNodes);\r\n    }\r\n}\r\nlet fpsCountTime = Date.now();\r\nlet fpsCount = 0;\r\nlet latestFps = 1;\r\nlet lastFrameTime = Date.now();\r\nfunction render() {\r\n    if (Date.now() > fpsCountTime + 1000) {\r\n        fpsCountTime = Date.now();\r\n        document.title = `DAGger - ${fpsCount} FPS`;\r\n        latestFps = fpsCount;\r\n        fpsCount = 0;\r\n    }\r\n    fpsCount++;\r\n    const dt = 0.001 * (Date.now() - lastFrameTime);\r\n    lastFrameTime = Date.now();\r\n    controller.update(dt);\r\n    const uTimeLoc = gl.getUniformLocation(program, \'time\');\r\n    gl.uniform1f(uTimeLoc, new Date().getTime() / 1000 - state.startTime);\r\n    setInitialUniforms();\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.viewport(0, 0, canvas.width, canvas.height);\r\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\r\n    state.frame++;\r\n    rerender();\r\n}\r\nwindow.addEventListener(\'load\', init);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n')}});